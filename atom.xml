<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cuzz&#39;s blog</title>
  
  <subtitle>填坑之路(Github托管)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.cuzz.site/"/>
  <updated>2018-11-23T15:29:49.835Z</updated>
  <id>http://blog.cuzz.site/</id>
  
  <author>
    <name>cuzz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆排序</title>
    <link href="http://blog.cuzz.site/2018/11/23/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.cuzz.site/2018/11/23/堆排序/</id>
    <published>2018-11-23T14:56:12.000Z</published>
    <updated>2018-11-23T15:29:49.835Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一篇面经，算法题是手写堆排序，《算法》已经放下很就了，想试试能不能写出来，然而并没有，所以记录一下</p><a id="more"></a><h1 id="自顶到底构造堆"><a href="#自顶到底构造堆" class="headerlink" title="自顶到底构造堆"></a>自顶到底构造堆</h1><p>这是一道lintcode上面的题目<a href="https://www.lintcode.com/problem/heapify/description" target="_blank" rel="noopener">堆化</a></p><blockquote><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给出一个整数数组，堆化操作就是把它变成一个最小堆数组。</p><p>对于堆数组A，A[0]是堆的根，并对于每个A[i]，A [i <em> 2 + 1]是A[i]的左儿子并且A[i </em> 2 + 2]是A[i]的右儿子。</p><p>您在真实的面试中是否遇到过这个题？  是</p><p>题目纠错</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>什么是堆？</p><ul><li>堆是一种数据结构，它通常有三种方法：push， pop 和 top。其中，“push”添加新的元素进入堆，“pop”删除堆中最小/最大元素，“top”返回堆中最小/最大元素。</li></ul><p>什么是堆化？</p><ul><li>把一个无序整数数组变成一个堆数组。如果是最小堆，每个元素A[i]，我们将得到A[i <em> 2 + 1] &gt;= A[i]和A[i </em> 2 + 2] &gt;= A[i]</li></ul><p>如果有很多种堆化的结果？</p><ul><li>返回其中任何一个。</li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>给出 <code>[3,2,1,4,5]</code>，返回<code>[1,2,3,4,5]</code> 或者任何一个合法的堆数组</p><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><p>O(n)的时间复杂度完成堆化</p></blockquote><p>构造一个堆只需要从左到右遍历数组，每次只要保证所遍历到的位子能满足堆的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param A: Given an integer array</span></span><br><span class="line"><span class="comment">     * @return: nothing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            swim(A, i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上浮</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; A[i] &lt; A[(i-<span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">            swap(A, i, (i-<span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            i = (i-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = A[i];</span><br><span class="line">        A[i] = A[j];</span><br><span class="line">        A[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自底到顶构造堆"><a href="#自底到顶构造堆" class="headerlink" title="自底到顶构造堆"></a>自底到顶构造堆</h1><p>而堆排序采用的是自底到顶构造堆，每次把第一个元素和最后一个元素交换，交换之后把第一个元素下沉，同时堆数组减一，下面是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (len - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sink(array, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">        printArr(array);</span><br><span class="line">        <span class="keyword">while</span> (len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            swap(array, <span class="number">0</span>, len);</span><br><span class="line">            sink(array, <span class="number">0</span>, --len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= len) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= len &amp;&amp; array[j+<span class="number">1</span>] &gt; array[j]) j++;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt; array[j]) <span class="keyword">break</span>;</span><br><span class="line">            swap(array, i, j);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        heapSort(array);</span><br><span class="line">        printArr(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        Arrays.stream(array).forEach(a -&gt; System.out.print(a + <span class="string">" "</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一篇面经，算法题是手写堆排序，《算法》已经放下很就了，想试试能不能写出来，然而并没有，所以记录一下&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.cuzz.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="堆排序" scheme="http://blog.cuzz.site/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
      <category term="lintcode" scheme="http://blog.cuzz.site/tags/lintcode/"/>
    
  </entry>
  
  <entry>
    <title>Shell入门</title>
    <link href="http://blog.cuzz.site/2018/10/04/Shell%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.cuzz.site/2018/10/04/Shell入门/</id>
    <published>2018-10-04T11:54:59.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Shell是操作系统（内核）与用户之间的桥梁  </p></blockquote><div class="note default"><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell</p></div><a id="more"></a><h1 id="Shell编程之Hello-World"><a href="#Shell编程之Hello-World" class="headerlink" title="Shell编程之Hello World"></a>Shell编程之Hello World</h1><p>编写一个hello world</p><p>shell一般使用<code>.sh</code>作为后缀</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash         # 使用/bin/sh来解释执行</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> auto echo hello world!   # 解释这个脚本是干什么的</span><br><span class="line"><span class="meta">#</span> by authors cuzz          # 作者和时间一些信息</span><br><span class="line"></span><br><span class="line">echo "hello world!"</span><br></pre></td></tr></table></figure><p>给脚本添加执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; chmod +x hello.sh</span><br></pre></td></tr></table></figure><h1 id="Shell编程之变量"><a href="#Shell编程之变量" class="headerlink" title="Shell编程之变量"></a>Shell编程之变量</h1><p>Shell变量可以分为两类：局部变量和环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> define path variables</span><br><span class="line"><span class="meta">#</span> by authors cuzz</span><br><span class="line"></span><br><span class="line">name=cuzz    # 等号两边不能有空格</span><br><span class="line"></span><br><span class="line">echo "my name is $name"  # 使用$引用</span><br></pre></td></tr></table></figure><p>基本变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo $PWD  # 当前路径</span><br><span class="line">echo $0    # 脚本名</span><br><span class="line">echo $1    # 第一个参数</span><br><span class="line">echo $2    # 第二个参数</span><br><span class="line">echo $?    # 判断上一个命令是否正确</span><br><span class="line">echo $*    # 所有参数</span><br><span class="line">echo $#    # 参数的个数</span><br></pre></td></tr></table></figure><h1 id="Shell编程之if条件语句"><a href="#Shell编程之if条件语句" class="headerlink" title="Shell编程之if条件语句"></a>Shell编程之if条件语句</h1><p>比较大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> if test</span><br><span class="line"><span class="meta">#</span> by authors cuzz</span><br><span class="line"></span><br><span class="line">num=100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 计算使用两个小括号</span><br><span class="line">if (($num &gt; 10)); then</span><br><span class="line">    echo "this num greater than 10."</span><br><span class="line">else</span><br><span class="line">    echo "this num littler than 10."</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>逻辑运算符</p><table><thead><tr><th style="text-align:center">运算符</th><th>说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td>检测两个数是否相等，相等返回   true。</td><td style="text-align:left">[   \$a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:center">-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td style="text-align:left">[ \$a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:center">-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:left">[ \$a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:center">-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:left">[ \$a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:center">-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ \$a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:center">-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ \$a -le $b ] 返回 true。</td></tr></tbody></table><p>目录</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> if test</span><br><span class="line"><span class="meta">#</span> by authors cuzz</span><br><span class="line"></span><br><span class="line">DIR=cuzz</span><br><span class="line"></span><br><span class="line">if [ ! -d $DIR ]; then  # 都有空格</span><br><span class="line">    mkdir $DIR</span><br><span class="line">    echo "this $DIR create success."</span><br><span class="line">else</span><br><span class="line">    echo "this dir is exit."</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>测试文件是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> if test</span><br><span class="line"><span class="meta">#</span> by authors cuzz</span><br><span class="line"></span><br><span class="line">file=test.txt</span><br><span class="line"></span><br><span class="line">if [ ! -e $file ]; then  </span><br><span class="line">    echo "OK" &gt;&gt; $file  # &gt;&gt;是追加内容 &gt;是覆盖内容</span><br><span class="line">else</span><br><span class="line">    cat $file</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>mysql备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> auto backup mysql db</span><br><span class="line"><span class="meta">#</span> by authors cuzz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> define backup path</span><br><span class="line">BAK_DIR=/data/backup/`date +%Y%m%d` # 反引号可以把里面当作命令来解析 </span><br><span class="line"><span class="meta">#</span> mysql</span><br><span class="line">MYSQLDB=test</span><br><span class="line">MYSQLUSER=root</span><br><span class="line">MYSQLPW=123456</span><br><span class="line">MYSQLCMD=/usr/bin/mysqldump # 备份命令</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 判断是否是root</span><br><span class="line">if [ $UID -ne 0 ]; then</span><br><span class="line">    echo "Only root can execute Shell."</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ ! -d $BAK_DIR ]; then</span><br><span class="line">    mkdir -p $BAK_DIR      # -p 父目录不存在就创建</span><br><span class="line">    echo "The $BAK_DIR create success."</span><br><span class="line">else</span><br><span class="line">    echo "This $BAK_DIR is exist."</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mysql backup command</span><br><span class="line"><span class="meta">$</span>MYSQLCMD -u$MYSQLUSER -p$MYSQLPW -d $MYSQLDB &gt;$BAK_DIR/$MYSQLDB.sql</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo "backup success."</span><br><span class="line">else</span><br><span class="line">    echo "backup fail."</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="Shell编程之for循环"><a href="#Shell编程之for循环" class="headerlink" title="Shell编程之for循环"></a>Shell编程之for循环</h1><p>基本语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">for i in `seq 1 15`</span><br><span class="line">do</span><br><span class="line">    echo "the number is $i."</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>求和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line"></span><br><span class="line">for ((i=1; i&lt;=100; i++)) # 双括号用于运算相当与其他语言的单括号</span><br><span class="line">do</span><br><span class="line">    sum=`expr $sum + $i` # expr用于计算</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "$sum"</span><br></pre></td></tr></table></figure><p>打包，只能打包到最后一个，后面的会把前面的覆盖了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">for file in `find ./ -name "*.sh"`</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">    tar -czf all.tgz $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="Shell编程之while循环"><a href="#Shell编程之while循环" class="headerlink" title="Shell编程之while循环"></a>Shell编程之while循环</h1><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line">while [[ $i -lt 10 ]]  # (( $i &lt; 10))是一样的</span><br><span class="line">do</span><br><span class="line">    echo "$i"</span><br><span class="line">    ((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>结合read使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">while read line   # 把读取的东西赋值给line</span><br><span class="line">do</span><br><span class="line">    echo $line</span><br><span class="line">done &lt;/etc/hosts  # 从哪里读取</span><br></pre></td></tr></table></figure><h1 id="Shell编程之数组"><a href="#Shell编程之数组" class="headerlink" title="Shell编程之数组"></a>Shell编程之数组</h1><p>Shell 数组用括号来表示，元素用”空格”符号分割开，语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my_array=(A B "C" D) # 定义数组</span><br><span class="line"></span><br><span class="line">array_name[0]=value0 # 使用下标来定义</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;array_name[0]&#125;    # 读取第一个元素</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;my_array[*]&#125;      # 读取所有元素       </span><br><span class="line"><span class="meta">$</span>&#123;my_array[@]&#125;      # 读取所有元素</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>&#123;#my_array[*]&#125;     # 读取数组长度</span><br><span class="line"><span class="meta">$</span>&#123;#my_array[@]&#125;     # 读取数组长度</span><br></pre></td></tr></table></figure><h1 id="Shell编程之函数"><a href="#Shell编程之函数" class="headerlink" title="Shell编程之函数"></a>Shell编程之函数</h1><p>无返回值得函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sayHello()&#123;                  # 定义函数一</span><br><span class="line">    echo "hello"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayHelloWorld()&#123;    # 定义函数二</span><br><span class="line">    echo "hello world"</span><br><span class="line">&#125;</span><br><span class="line">sayhell  # 使用函数</span><br></pre></td></tr></table></figure><p>有返回值得，使用return只能返回0-255</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">  returnValue=$(( $1 + $2 ))</span><br><span class="line">  return $returnValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum 22 4</span><br><span class="line"></span><br><span class="line">echo $?</span><br></pre></td></tr></table></figure><p>可以使用echo来传递参数 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function length()</span><br><span class="line">&#123;</span><br><span class="line">  str=$1</span><br><span class="line">  result=0</span><br><span class="line">  if [ "$str" != "" ] ; then</span><br><span class="line">      result=$&#123;#str&#125;</span><br><span class="line">  fi</span><br><span class="line">  echo "$result"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len=$(length "abc123")  # 调用</span><br><span class="line"></span><br><span class="line">echo "The string's length is $len "</span><br></pre></td></tr></table></figure><h1 id="Shell编程之sed命令"><a href="#Shell编程之sed命令" class="headerlink" title="Shell编程之sed命令"></a>Shell编程之sed命令</h1><p>把test.txt中的old修改为new，要使用-i才能插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed -i &apos;s/old/new/s&apos; test.txt</span><br></pre></td></tr></table></figure><p>在每行行前面添加一个cuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed -i  sed &apos;s/^/&amp;cuzz/g&apos; test.txt</span><br></pre></td></tr></table></figure><p>在每行的末尾添加一个cuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed  -i &apos;s/$/&amp; cuzz/g&apos; test.txt</span><br></pre></td></tr></table></figure><p>匹配某一行，在下方插入一行，找到cuzz这行在下方插入####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed &apos;/cuzz/a #######&apos; test.txt</span><br></pre></td></tr></table></figure><p>在之前添加一行，只要把a改成i</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed &apos;/cuzz/i #######&apos; test.txt</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; sed -n &apos;/cuzz/p&apos; test.txt  # 打印含有cuzz这一行</span><br><span class="line">&gt; sed -n &apos;1p&apos; test.txt       # 打印第一行</span><br><span class="line">&gt; sed -n &apos;1,5p&apos; text.txt     # 打印1到5行</span><br></pre></td></tr></table></figure><p>查找最大和最小值 number.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">12 324 56 0034 -23 345</span><br><span class="line">345 349- 245 345 </span><br><span class="line"></span><br><span class="line">345 0989 0459 -25</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat number.txt | sed 's/ /\n/g' | grep -v "^$" | sort -nr | sed -n '1p;$p'</span><br><span class="line"></span><br><span class="line">sed 's/ /\n/g'  # 把所有空格换成换行</span><br><span class="line">grep -v "^$"    # 去掉所有空格</span><br><span class="line">sort -nr        # 降序排列</span><br><span class="line">sed -n '1p;$p   # 找出第1行和最后一行</span><br></pre></td></tr></table></figure><h1 id="Shell编程之grep命令"><a href="#Shell编程之grep命令" class="headerlink" title="Shell编程之grep命令"></a>Shell编程之grep命令</h1><blockquote><p>-a ：将 binary 文件以 text 文件的方式搜寻数据</p><p>-c ：计算找到 ‘搜寻字符串’ 的次数</p><p>-i ：忽略大小写的不同，所以大小写视为相同</p><p>-n ：顺便输出行号</p><p>-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行</p><p>–color=auto ：可以将找到的关键词部分加上颜色的显示</p></blockquote><p>egrep 和grep -E 相同，可以使用正则表达式</p><h1 id="Shell编程之awk命令"><a href="#Shell编程之awk命令" class="headerlink" title="Shell编程之awk命令"></a>Shell编程之awk命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 每行按空格或TAB分割</span><br><span class="line">cat test.txt | awk '&#123;print $1&#125;'      # 行匹配语句 awk '' 只能用单引号</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 指定分割</span><br><span class="line">awk -F                               #-F相当于内置变量FS, 指定分割字符</span><br><span class="line">cat test.txt | awk -F: '&#123;print $1&#125;'  # 以分号分割</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 指定添加某些内容</span><br><span class="line">cat test.txt | awk -F: '&#123;print "haha" $1&#125;' # 提前出来再添加haha</span><br></pre></td></tr></table></figure><h1 id="Shell编程之find命令"><a href="#Shell编程之find命令" class="headerlink" title="Shell编程之find命令"></a>Shell编程之find命令</h1><p>基本命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find /dir -name "test.txt"          # 在/dir目录下查找</span><br><span class="line">find . -name "test.txt"             # 在当前目录下找 </span><br><span class="line">find . -maxdepth 1 -name "text.txt" # 只遍历一层</span><br><span class="line">find . -type f -name "text"         # 指定类型</span><br><span class="line">find . -name "text" -mtime -1       # 指定时间</span><br><span class="line">find . -size +20M                   # 指定大小</span><br></pre></td></tr></table></figure><p>查找并执行其他命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name "text.txt" -exec rm -rf &#123;&#125; \;  # 后面&#123;&#125; \是固定格式</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Shell是操作系统（内核）与用户之间的桥梁  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。&lt;/p&gt;
&lt;p&gt;Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。&lt;/p&gt;
&lt;p&gt;Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.cuzz.site/categories/linux/"/>
    
    
      <category term="shell" scheme="http://blog.cuzz.site/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（三）</title>
    <link href="http://blog.cuzz.site/2018/09/25/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://blog.cuzz.site/2018/09/25/Spring注解驱动开发（三）/</id>
    <published>2018-09-25T14:14:29.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>注解可以简化配置，提高效率</p></blockquote><div class="note default"><p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p></div><a id="more"></a><h1 id="属性赋值-value赋值"><a href="#属性赋值-value赋值" class="headerlink" title="属性赋值@value赋值"></a>属性赋值@value赋值</h1><p>使用@Value赋值</p><ul><li>基本数值</li><li>可以写SPEL表达式 #{}</li><li>可以${}获取配置文件信息（在运行的环境变量中的值）</li></ul><p>使用xml时候导入配置文件是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:person.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解可以在配置类添加一个@PropertySource注解把配置文件中k/v保存到运行的环境中</p><p>使用${key}来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 18:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:/person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"vhuj"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;20-2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.nickName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printBean(applicationContext);</span><br><span class="line">    System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---------------------------</span><br><span class="line">Person(name=vhuj, age=18, nickName=三三)</span><br><span class="line">---------------------------</span><br></pre></td></tr></table></figure><h1 id="自动装配-Autowired-Qualifier-Primary"><a href="#自动装配-Autowired-Qualifier-Primary" class="headerlink" title="自动装配@Autowired@Qualifier@Primary"></a>自动装配@Autowired@Qualifier@Primary</h1><p>自动转配：</p><p>​    Spring利用依赖注入（DI），完成对IOC容器中各个组件的依赖关系赋值</p><p> @Autowired自动注入:</p><p>​    a. 默认优先按照类型去容器中寻找对应的组件，如果找到去赋值</p><p>​    b. 如果找到到相同类型的组件，再将属性名（<code>BookDao bookdao</code>）作为组件的id去容器中查找</p><p>​    c. 接下来还可以使用<code>@Qualifier(&quot;bookdao&quot;)</code>明确指定需要装配的id</p><p>​    d. 默认是必须的，我们可以指定    <code>@Autowired(required=false)</code>，指定非必须</p><p>@Primary让Spring自动装配时首先装配</p><h1 id="自动装配-Resource和-Inject"><a href="#自动装配-Resource和-Inject" class="headerlink" title="自动装配@Resource和@Inject"></a>自动装配@Resource和@Inject</h1><p>Spring还支持使用@Resource (JSR250) 和@Inject (JSR330) 注解，这两个是java规范</p><p>@Resource和@Autowired一样实现自动装配功能，默认是按组件名称进行装配的</p><p>没有支持@Primary和@Autowird(required=false)的功能</p><h1 id="自动装配其他地方的自动装配"><a href="#自动装配其他地方的自动装配" class="headerlink" title="自动装配其他地方的自动装配"></a>自动装配其他地方的自动装配</h1><p>@Autowired：构造器、参数、方法属性等</p><p>标注到方法位子上@Bean+方法参数，参数从容器中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器 如果构造器只有一个有参构造器可以省略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(@Autowired ar car)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set方法</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(@Autowired Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动装配Aware注入Spring底层注解"><a href="#自动装配Aware注入Spring底层注解" class="headerlink" title="自动装配Aware注入Spring底层注解"></a>自动装配Aware注入Spring底层注解</h1><p>自定义组件想要使用Spring容器底层的一些组件（ApplicationContext，BeanFactory 等等），自定义组件实现xxxAware，在创建对象的时候会调用接口规定的方法注入相关的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marker superinterface indicating that a bean is eligible to be</span></span><br><span class="line"><span class="comment"> * notified by the Spring container of a particular framework object</span></span><br><span class="line"><span class="comment"> * through a callback-style method. Actual method signature is</span></span><br><span class="line"><span class="comment"> * determined by individual subinterfaces, but should typically</span></span><br><span class="line"><span class="comment"> * consist of just one void-returning method that accepts a single</span></span><br><span class="line"><span class="comment"> * argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们实现几个常见的Aware接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/25 10:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span> ,<span class="title">BeanFactoryAware</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前Bean的名字: "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前的BeanFactory: "</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        System.out.println(<span class="string">"传入的ioc: "</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到配置中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/25 10:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAware.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前Bean的名字: red</span><br><span class="line">当前的BeanFactory: org.springframework.beans.factory.support.DefaultListableBeanFactory@159c4b8: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,mainConfigOfAware,red]; root of factory hierarchy</span><br><span class="line">传入的ioc: org.springframework.context.annotation.AnnotationConfigApplicationContext@1e89d68: startup date [Tue Sep 25 10:29:17 CST 2018]; root of context hierarchy</span><br></pre></td></tr></table></figure><p>把Spring自定义组件注入到容器中</p><p><strong>原理：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>xxxAware</code>都是通过<code>xxxProcessor</code>来处理的</p><p>比如：<code>ApplicationContextAware</code>  对应<code>ApplicationContextAwareProcessor</code></p><h1 id="自动装配-Profile环境搭建"><a href="#自动装配-Profile环境搭建" class="headerlink" title="自动装配@Profile环境搭建"></a>自动装配@Profile环境搭建</h1><p>Profile是Spring为我们提供可以根据当前环境，动态的激活和切换一系组件的功能</p><p><strong>a.</strong> 使用命令动态参数激活：虚拟机参数位子加载 `-Dspring.profiles.active=test</p><p><strong>b.</strong> 使用代码激活环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/25 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTestProfile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 使用无参构造器创建一个applicationContext</span></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        <span class="comment">// 2. 设置要激活的环境</span></span><br><span class="line">        applicationContext.getEnvironment().setActiveProfiles(<span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">// 3. 注册主配置类</span></span><br><span class="line">        applicationContext.register(MainConfigOfProfile.class);</span><br><span class="line">        <span class="comment">// 4. 启动刷新容器</span></span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;注解可以简化配置，提高效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.cuzz.site/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.cuzz.site/tags/Spring/"/>
    
      <category term="注解" scheme="http://blog.cuzz.site/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（二）</title>
    <link href="http://blog.cuzz.site/2018/09/24/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://blog.cuzz.site/2018/09/24/Spring注解驱动开发（二）/</id>
    <published>2018-09-24T15:44:39.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>注解可以简化配置，提高效率</p></blockquote><div class="note default"><p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p></div><a id="more"></a><h1 id="声明周期-Bean指定初始化和销毁方法"><a href="#声明周期-Bean指定初始化和销毁方法" class="headerlink" title="声明周期@Bean指定初始化和销毁方法"></a>声明周期@Bean指定初始化和销毁方法</h1><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>Bean的创建、初始化和销毁是由容器帮我们管理的</p><p>我们可以自定义初始化和销毁方法，容器在进行到当前生命周期的时候来调用我买自定义的初始化和销毁方法</p><p>构造（对象创建）</p><p>​    单实例： 在容器启动的时候创建</p><p>​    多实例： 在每次获取的时候创建对象</p><h2 id="指定初始化方法"><a href="#指定初始化方法" class="headerlink" title="指定初始化方法"></a>指定初始化方法</h2><p><strong>初始化：</strong>对象创建完成后，并赋值化，调用初始化方法</p><p><strong>销毁：</strong>单实例是在容器关闭的时候销毁，多实例容器不会管理这个Bean，容器不会调用销毁方法</p><p>编写一个Car类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 21:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car...init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"car...destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在xml中我们可以指定<code>init-method</code>和<code>destroy-method</code>方法，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.cuzz.bean.Car"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解我们可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 12:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfLifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 13:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTestLifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ioc容器</span></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfLifecycle.class);</span><br><span class="line">        System.out.println(<span class="string">"容器创建完成..."</span>);</span><br><span class="line">        <span class="comment">// 关闭容器</span></span><br><span class="line">        System.out.println(<span class="string">"---&gt;开始关闭容器"</span>);</span><br><span class="line">        applicationContext.close();</span><br><span class="line">        System.out.println(<span class="string">"---&gt;已经关闭容器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出先创建car，再调用init方法，在容器关闭时销毁实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">car constructor...</span><br><span class="line">car...init...</span><br><span class="line">容器创建完成...</span><br><span class="line">---&gt;开始关闭容器</span><br><span class="line">car...destroy...</span><br><span class="line">---&gt;已经关闭容器</span><br></pre></td></tr></table></figure><p>在配置数据源的时候，有很多属性赋值，销毁的时候要把连接给断开</p><h1 id="生命周期InitializingBean和DisposableBean"><a href="#生命周期InitializingBean和DisposableBean" class="headerlink" title="生命周期InitializingBean和DisposableBean"></a>生命周期InitializingBean和DisposableBean</h1><h2 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h2><p>可以通过Bean实现InitializingBean来定义初始化逻辑，是设置好所有属性会调用<code>afterPropertiesSet()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoked by a BeanFactory after it has set all bean properties supplied</span></span><br><span class="line"><span class="comment"> * (and satisfied BeanFactoryAware and ApplicationContextAware).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method allows the bean instance to perform initialization only</span></span><br><span class="line"><span class="comment"> * possible when all bean properties have been set and to throw an</span></span><br><span class="line"><span class="comment"> * exception in the event of misconfiguration.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in the event of misconfiguration (such</span></span><br><span class="line"><span class="comment"> * as failure to set an essential property) or if initialization fails.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DisposableBean"><a href="#DisposableBean" class="headerlink" title="DisposableBean"></a>DisposableBean</h2><p>可以通过Bean实现DisposableBean来定义销毁逻辑，会调用destroy()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoked by a BeanFactory on destruction of a singleton.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of shutdown errors.</span></span><br><span class="line"><span class="comment"> * Exceptions will get logged but not rethrown to allow</span></span><br><span class="line"><span class="comment"> * other beans to release their resources too.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>编写一个Cat类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 13:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat...init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat...destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat constructor...</span><br><span class="line">cat...init...</span><br><span class="line">容器创建完成...</span><br><span class="line">---&gt;开始关闭容器</span><br><span class="line">cat...destroy...</span><br><span class="line">---&gt;已经关闭容器</span><br></pre></td></tr></table></figure><h1 id="生命周期-PostContruct和-PreDestroy注解"><a href="#生命周期-PostContruct和-PreDestroy注解" class="headerlink" title="生命周期@PostContruct和@PreDestroy注解"></a>生命周期@PostContruct和@PreDestroy注解</h1><p>@PostContruct在Bean创建完成并且属性赋值完成，来执行初始化</p><p>@PreDestroy在容器销毁Bean之前通知我们进行清理工作</p><p>编写一个Dog类，并把他注入到配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 14:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post construct..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pre destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dog constructor...</span><br><span class="line">post construct...</span><br><span class="line">容器创建完成...</span><br><span class="line">---&gt;开始关闭容器</span><br><span class="line">pre destroy...</span><br><span class="line">---&gt;已经关闭容器</span><br></pre></td></tr></table></figure><h1 id="生命周期BeanPostProscessor后置处理器"><a href="#生命周期BeanPostProscessor后置处理器" class="headerlink" title="生命周期BeanPostProscessor后置处理器"></a>生命周期BeanPostProscessor后置处理器</h1><p>在Bean初始化前后做一些处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在初始化之前工作</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="comment">// 在初始化之后工作</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个MyBeanPostProcessor实现BeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/24 14:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 后置处理器，初始化前后进行处理工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---&gt;postProcessBeforeInitialization..."</span> + beanName +<span class="string">"==&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---&gt;postProcessAfterInitialization..."</span> + beanName +<span class="string">"==&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---&gt;postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerProcessor==&gt;org.springframework.context.event.EventListenerMethodProcessor@1dc67c2</span><br><span class="line">---&gt;postProcessAfterInitialization...org.springframework.context.event.internalEventListenerProcessor==&gt;org.springframework.context.event.EventListenerMethodProcessor@1dc67c2</span><br><span class="line">---&gt;postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerFactory==&gt;org.springframework.context.event.DefaultEventListenerFactory@2bd765</span><br><span class="line">---&gt;postProcessAfterInitialization...org.springframework.context.event.internalEventListenerFactory==&gt;org.springframework.context.event.DefaultEventListenerFactory@2bd765</span><br><span class="line">cat constructor...</span><br><span class="line">---&gt;postProcessBeforeInitialization...cat==&gt;com.cuzz.bean.Cat@1d3b207</span><br><span class="line">cat...init...</span><br><span class="line">---&gt;postProcessAfterInitialization...cat==&gt;com.cuzz.bean.Cat@1d3b207</span><br><span class="line">容器创建完成...</span><br><span class="line">---&gt;开始关闭容器</span><br><span class="line">cat...destroy...</span><br><span class="line">---&gt;已经关闭容器</span><br></pre></td></tr></table></figure><p>在实例创建之前后创建之后会被执行</p><h1 id="生命周期BeanPostProcessor原理"><a href="#生命周期BeanPostProcessor原理" class="headerlink" title="生命周期BeanPostProcessor原理"></a>生命周期BeanPostProcessor原理</h1><p>通过debug到populateBean，先给属性赋值在执行initializeBean方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initializeBean方法时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// 执行before方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行初始化</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// 执行after方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Spring底层对<code>BeanPostProcessor</code>的使用</strong>：</p><p>Bean赋值、注入其他组件、@Autowired、生命周期注解功能、@Async等等都使用到了BeanPostProcessor这个接口的实现类，很重要</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;注解可以简化配置，提高效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.cuzz.site/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.cuzz.site/tags/Spring/"/>
    
      <category term="注解" scheme="http://blog.cuzz.site/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（一）</title>
    <link href="http://blog.cuzz.site/2018/09/23/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.cuzz.site/2018/09/23/Spring注解驱动开发（一）/</id>
    <published>2018-09-23T13:54:59.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>注解可以简化配置，提高效率</p></blockquote><div class="note default"><p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p></div><a id="more"></a><h1 id="组件注册-Configuration和-Bean的注入"><a href="#组件注册-Configuration和-Bean的注入" class="headerlink" title="组件注册@Configuration和@Bean的注入"></a>组件注册@Configuration和@Bean的注入</h1><h2 id="使用xml方式"><a href="#使用xml方式" class="headerlink" title="使用xml方式"></a>使用xml方式</h2><p>我们一起注入一个bean使用xml来配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.cuzz.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"cuzz"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我可以使用<code>ClassPathXmlApplicationContext</code>来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext  applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 用id获取</span></span><br><span class="line">        Person bean = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<code>Person(name=cuzz, age=18)</code></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>编写一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 10:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉Spring这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 给容器中注册一个Bean,类型为返回值类型,id默认用方法名</span></span><br><span class="line">    <span class="comment">// 也可以指定id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"vhsj"</span>, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过<code>AnnotationConfigApplicationContext</code>来获取，并且获取id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">        Person person = (Person) context.getBean(Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        String[] names = context.getBeanNamesForType(Person.class);</span><br><span class="line">        <span class="keyword">for</span> (String name: names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person(name=vhsj, age=16)</span><br><span class="line">person01</span><br></pre></td></tr></table></figure><p>由于给bean添加一个一个value，可以改变默认id</p><h1 id="组件注册-ComponentScan"><a href="#组件注册-ComponentScan" class="headerlink" title="组件注册@ComponentScan"></a>组件注册@ComponentScan</h1><h2 id="使用xml"><a href="#使用xml" class="headerlink" title="使用xml"></a>使用xml</h2><p>只要标注了注解就能扫描到如:@Controller @Service @Repository @component</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cuzz"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h2><p>在配置类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 10:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉Spring这是一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.cuzz"</span>) <span class="comment">// 指定包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加controller、service等</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 13:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">        <span class="comment">// 获取所有bean定义的名字</span></span><br><span class="line">        String[] beanNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig</span><br><span class="line">bookController</span><br><span class="line">bookDao</span><br><span class="line">bookService</span><br><span class="line">person01</span><br></pre></td></tr></table></figure><p>可以看出添加@Controller @Service @Repository @component注解的都可以扫描到</p><p>还可以指定添加某些类，和排除某些类，进入ComponentScan注解中有下面两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ComponentScan.Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">ComponentScan.Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">includeFilters = Filter[] ：指定扫描的时候只需要包含哪些组件</span><br><span class="line">excludeFilters = Filter[] ：指定扫描的时候按照什么规则排除那些组件</span><br></pre></td></tr></table></figure><p>配置类，排除Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉Spring这是一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.cuzz"</span>, excludeFilters = &#123;</span><br><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法，可以得出没有Controller类的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig</span><br><span class="line">bookDao</span><br><span class="line">bookService</span><br><span class="line">person01</span><br></pre></td></tr></table></figure><h2 id="自定义TypeFilter指定过滤规则"><a href="#自定义TypeFilter指定过滤规则" class="headerlink" title="自定义TypeFilter指定过滤规则"></a>自定义TypeFilter指定过滤规则</h2><p>第一和第二比较常用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FilterType.ANNOTATION：按照注解</span><br><span class="line">FilterType.ASSIGNABLE_TYPE：按照给定的类型；</span><br><span class="line">FilterType.ASPECTJ：使用ASPECTJ表达式</span><br><span class="line">FilterType.REGEX：使用正则指定</span><br><span class="line">FilterType.CUSTOM：使用自定义规则</span><br></pre></td></tr></table></figure><p>新建一个MyTypeFilte类实现TypeFilter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 15:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * metadataReader：读取到的当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment">     * metadataReaderFactory:可以获取到其他任何类信息的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前类注解的信息</span></span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">//获取当前正在扫描的类的类信息</span></span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">//获取当前类资源（类的路径）</span></span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">"---&gt;"</span>+className);</span><br><span class="line">        <span class="comment">// 这些类名中包含er就返回true</span></span><br><span class="line">        <span class="keyword">if</span>(className.contains(<span class="string">"er"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义注解记得需要关闭默认过滤器<code>useDefaultFilters = false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 10:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.cuzz"</span>,</span><br><span class="line">        includeFilters = <span class="meta">@ComponentScan</span>.Filter(type = FilterType.CUSTOM,</span><br><span class="line">                classes = MyTypeFilter.class),</span><br><span class="line">        useDefaultFilters = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 给容器中注册一个Bean,类型为返回值类型,id默认用方法名</span></span><br><span class="line">    <span class="comment">// 也可以指定id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"vhsj"</span>, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">---&gt;com.cuzz.AppTest</span><br><span class="line">---&gt;com.cuzz.bean.MainTest</span><br><span class="line">---&gt;com.cuzz.config.IOCTest</span><br><span class="line">---&gt;com.cuzz.config.MainTest</span><br><span class="line">---&gt;com.cuzz.App</span><br><span class="line">---&gt;com.cuzz.bean.Person</span><br><span class="line">---&gt;com.cuzz.config.MyTypeFilter</span><br><span class="line">---&gt;com.cuzz.controller.BookController</span><br><span class="line">---&gt;com.cuzz.dao.BookDao</span><br><span class="line">---&gt;com.cuzz.sevice.BookService</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig     // 不是扫描的 </span><br><span class="line">person   // 这个是在bean中</span><br><span class="line">myTypeFilter   // 有er</span><br><span class="line">bookController // 有er</span><br><span class="line">bookService    // 有er</span><br><span class="line">person01       // 这个是在bean中</span><br></pre></td></tr></table></figure></p><h1 id="组件注册-Scope设置作用域"><a href="#组件注册-Scope设置作用域" class="headerlink" title="组件注册@Scope设置作用域"></a>组件注册@Scope设置作用域</h1><h2 id="Spring的bean默认是单例的"><a href="#Spring的bean默认是单例的" class="headerlink" title="Spring的bean默认是单例的"></a>Spring的bean默认是单例的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line">    <span class="comment">// 获取所有bean定义的名字</span></span><br><span class="line">    String[] beanNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    Object bean = applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    Object bean2 = applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(bean == bean2);   <span class="comment">// 输出true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scope的四个范围"><a href="#Scope的四个范围" class="headerlink" title="Scope的四个范围"></a>Scope的四个范围</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableBeanFactory#SCOPE_PROTOTYPE   // 多实例 每次获取时创建对象，不会放在ioc容器中</span><br><span class="line">ConfigurableBeanFactory#SCOPE_SINGLETON   // 单实例 ioc容器启动是创建对象，以后从容器中获取</span><br><span class="line">WebApplicationContext#SCOPE_REQUEST       // web同一次请求创建一个实例</span><br><span class="line">WebApplicationContext#SCOPE_SESSION       // web同一个session创建一个实例</span><br></pre></td></tr></table></figure><p>如果我们把Scope修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"vhuj"</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则测试输出false</p><h1 id="组件注册-Lazy-bean懒加载"><a href="#组件注册-Lazy-bean懒加载" class="headerlink" title="组件注册@Lazy-bean懒加载"></a>组件注册@Lazy-bean懒加载</h1><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>懒加载的是针对单实例Bean，默认是在容器启动的时创建的，我们可以设置懒加载容器启动是不创建对象，在第一次使用（获取）Bean创建对象，并初始化</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先给添加一个@Lazy注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加Person..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"vhuj"</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"ioc容器创建完成..."</span>);</span><br><span class="line">    Object bean = applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ioc容器创建完成...</span><br><span class="line">给容器中添加Person...</span><br></pre></td></tr></table></figure><p>添加一个@Lazy是在第一次获取时，创建对象，以后获取就不需要创建了，直接从容器中获取，因为它是单实例</p><h1 id="组件注册-Conditional按条件注册"><a href="#组件注册-Conditional按条件注册" class="headerlink" title="组件注册@Conditional按条件注册"></a>组件注册@Conditional按条件注册</h1><p>按照一定条件进行判断，满足条件给容器中注册Bean</p><h2 id="编写自己的Condition类"><a href="#编写自己的Condition类" class="headerlink" title="编写自己的Condition类"></a>编写自己的Condition类</h2><p>如果系统是windows，给容器中注入”bill”</p><p>如果系统是linux，给容器中注入”linus”</p><p>编写WindowCondition类并重写matches方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span>: 2018/9/23 20:30</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span>: 判断是否是windows</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> context 判断条件</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> metadata 注释信息</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">          Environment environment = context.getEnvironment();</span><br><span class="line">          String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">          <span class="keyword">if</span> (property.contains(<span class="string">"Windows"</span>)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>context有以下方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 能获取ioc使用的beanfactory</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">// 能获取到类加载器</span><br><span class="line">ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">// 获取到环境变量</span><br><span class="line">Environment environment = context.getEnvironment();</span><br><span class="line">// 获取到Bean定义的注册类</span><br><span class="line">BeanDefinitionRegistry registry = context.getRegistry();</span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>添加Bean添加Condition条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;WindowCondition.class&#125;)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;LinuxCondition.class&#125;)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"linux"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"linus"</span>, <span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取环境变量</span></span><br><span class="line">    ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">    String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">    System.out.println(property);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有bean定义的名字</span></span><br><span class="line">    String[] beanNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key 是id</span></span><br><span class="line">    Map&lt;String, Person&gt; map = applicationContext.getBeansOfType(Person.class);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现只有“bill”这个Bean被注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows 7</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig2</span><br><span class="line">bill</span><br><span class="line">&#123;bill=Person(name=Bill Gates, age=60)&#125;</span><br></pre></td></tr></table></figure><h1 id="组件注册-Improt给容器中快速导入一个组件"><a href="#组件注册-Improt给容器中快速导入一个组件" class="headerlink" title="组件注册@Improt给容器中快速导入一个组件"></a>组件注册@Improt给容器中快速导入一个组件</h1><h2 id="Import导入"><a href="#Import导入" class="headerlink" title="@Import导入"></a>@Import导入</h2><p>@Import可以导入第三方包，或则自己写的类，比较方便，Id默认为全类名</p><p>比如我们新建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 21:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要在配置类添加一个@Import把这个类导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Color.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ImportSelector接口导入的选择器"><a href="#ImportSelector接口导入的选择器" class="headerlink" title="ImportSelector接口导入的选择器"></a>ImportSelector接口导入的选择器</h2><p>返回导入组件需要的全类名的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个MyImportSelector类实现ImportSelector接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值就导入容器组件的全类名</span></span><br><span class="line">    <span class="comment">// AnnotationMetadata:当前类标注的@Import注解类的所有注解信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;<span class="string">"com.cuzz.bean.Car"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置类中，通过@Import导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Color.class, MyImportSelector.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>测试结果，<code>com.cuzz.bean.Car</code>注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig2</span><br><span class="line">com.cuzz.bean.Color</span><br><span class="line">com.cuzz.bean.Car</span><br></pre></td></tr></table></figure><h2 id="ImportBeanDefinitionRegistrar接口选择器"><a href="#ImportBeanDefinitionRegistrar接口选择器" class="headerlink" title="ImportBeanDefinitionRegistrar接口选择器"></a>ImportBeanDefinitionRegistrar接口选择器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register bean definitions as necessary based on the given annotation metadata of</span></span><br><span class="line"><span class="comment"> * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</span></span><br><span class="line"><span class="comment"> * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</span></span><br><span class="line"><span class="comment"> * class processing.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry current bean definition registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个ImportBeanDefinitionRegistrar实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 21:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata 当前类的注解信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry 注册类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询容器</span></span><br><span class="line">        <span class="keyword">boolean</span> b = registry.containsBeanDefinition(<span class="string">"com.cuzz.bean.Car"</span>);</span><br><span class="line">        <span class="comment">// 如果有car, 注册一个汽油类</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 需要添加一个bean的定义信息</span></span><br><span class="line">            RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(Petrol.class);</span><br><span class="line">            <span class="comment">// 注册一个bean, 指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">"petrol"</span>, rootBeanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>测试结果，<strong>出现了petrol</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig2</span><br><span class="line">com.cuzz.bean.Color</span><br><span class="line">com.cuzz.bean.Car </span><br><span class="line">petrol</span><br></pre></td></tr></table></figure><h1 id="组件注册使用FactoryBean注册组件"><a href="#组件注册使用FactoryBean注册组件" class="headerlink" title="组件注册使用FactoryBean注册组件"></a>组件注册使用FactoryBean注册组件</h1><p>编写一个ColorFactoryBean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cuzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/23 21:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Spring定义的工厂Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个Color对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否为单例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ColorFactoryBean <span class="title">colorFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line"></span><br><span class="line">    Object bean = applicationContext.getBean(<span class="string">"colorFactoryBean"</span>);</span><br><span class="line">    <span class="comment">// 工厂bean调用的是getClass()方法</span></span><br><span class="line">    System.out.println(<span class="string">"colorFactoryBean的类型是: "</span> + bean.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，<strong>发现此时的bean调用的方法是getObjectType方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colorFactoryBean的类型是: class com.cuzz.bean.Color</span><br></pre></td></tr></table></figure><p><strong>如果需要获取BeanFactory本身，可以在id前面加一个“&amp;”标识</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line"></span><br><span class="line">    Object bean = applicationContext.getBean(<span class="string">"colorFactoryBean"</span>);</span><br><span class="line">    <span class="comment">// 工厂bean调用的是getClass()方法</span></span><br><span class="line">    System.out.println(<span class="string">"colorFactoryBean的类型是: "</span> + bean.getClass());</span><br><span class="line">    Object bean2 = applicationContext.getBean(<span class="string">"&amp;colorFactoryBean"</span>);</span><br><span class="line">    <span class="comment">// 工厂bean调用的是getClass()方法</span></span><br><span class="line">    System.out.println(<span class="string">"colorFactoryBean的类型是: "</span> + bean2.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colorFactoryBean的类型是: class com.cuzz.bean.Color</span><br><span class="line">colorFactoryBean的类型是: class com.cuzz.bean.ColorFactoryBean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;注解可以简化配置，提高效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.cuzz.site/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.cuzz.site/tags/Spring/"/>
    
      <category term="注解" scheme="http://blog.cuzz.site/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>实习结束篇</title>
    <link href="http://blog.cuzz.site/2018/09/10/%E5%AE%9E%E4%B9%A0%E7%BB%93%E6%9D%9F%E7%AF%87/"/>
    <id>http://blog.cuzz.site/2018/09/10/实习结束篇/</id>
    <published>2018-09-10T13:54:22.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>常怀感恩的心</p></blockquote><p>昨天提交了离职信，完了成了一系列辞职手续</p><p>总经理找我聊了一会，谈了谈人生规划，很感谢他能给予我建议，也希望我毕业后能再回公司</p><a id="more"></a><p>先是和我师父告别，师父先是询问了我的情况，后来把我带到公司楼下聊了一会，询问了我一下规划，总结一下他给我提的意见</p><ul><li>毕业刚出去，先去一线互联网城市，首先选择大厂，前三年不要太在意工资，主要是眼界</li><li>不要本末倒置，现在不要天天去背那些面试题和刷题，当前重要的是知识的沉淀，把公司用到的中间件，好好研究一下，不要只是看看，而要动手去搭建</li><li>不是科班出身的，身边缺少这种技术的氛围，平时多努力努力，多认识认识朋友</li><li>学校有项目，即使没报酬，也要去参与，多积累经验</li></ul><p>然后是跟外卖组的人告别，感谢组长CJG，小师兄HL，以及CWZ，BW，NZ这些人对我的帮助，这一段时间在这里学习到了许多，感谢这些人</p><p>HL小师兄，也单独和我聊了聊，询问了我的情况，也给我一些工作经验，不能被人影响到自己，平时做事认真一点，不要担心犯错等</p><p>小师兄还送我下楼，最后小师兄拥抱一个就告别了</p><p>走到地铁站发现身上还有一张48的的士票还没报，又回公司了</p><p>然后又跟同事告别了一波</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;常怀感恩的心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天提交了离职信，完了成了一系列辞职手续&lt;/p&gt;
&lt;p&gt;总经理找我聊了一会，谈了谈人生规划，很感谢他能给予我建议，也希望我毕业后能再回公司&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://blog.cuzz.site/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="实习" scheme="http://blog.cuzz.site/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>实习记录</title>
    <link href="http://blog.cuzz.site/2018/07/23/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.cuzz.site/2018/07/23/实习记录/</id>
    <published>2018-07-23T14:24:12.000Z</published>
    <updated>2018-11-06T13:40:19.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>实习给了我很大信心</p></blockquote><p>实习一段时间了，说说最近的感受吧</p><p>我是转行的，现在是一名材料计算的研究生，为什么要说材料计算呢，我是希望去面试的时候至少有计算这两个字，HR至少会觉得我跟计算机有点靠边，减少被HR给过滤掉</p><a id="more"></a><p>学java大概半年了，把java基础学完，在慕课网上找了一个实战课程，这是我部署上线的<a href="http://111.230.104.64/" target="_blank" rel="noopener">网站</a>（还没写完），就去找实习了</p><p>由于是暑假，老师管的也没那么严，不用去实验室</p><p>刚开始的时候，不是很自信，在拉钩、Boss直聘和智联投简历，大概投了100来份，收到5-6个面试，武汉的夏天真的热，最气愤的是，遇到一两个培训机构，浪费时间，后来去面试都会在网上先查查，刚开始面试的都是一些小公司，小公司基本都是问你项目，然而我项目经验又不多，基本上都是回去等消息</p><p>接着面试了另一家小公司，公司的老板和我是一个学校的，跟我聊的也很不错，本来打算在这里实习的，后来收到良品的实习offer，就没去了，也跟这位学长沟通了，他也支持我</p><p>后来良品铺子打电话给我，让我去面试，良品铺子在武汉来说算比较大的企业，面试我的是一名架构师，大公司比较喜欢问基础，我对java基础掌握的还不错，答的也还可以，得到了他的认可，后面的面试就很轻松，他还主动要帮我加工资，后来我就认他当我师傅，真的很好，很感谢他</p><p>他还夸我基础挺好的，后来被我分配到外卖组，也是比较好的组，属于电商，所用的技术也是比较新</p><p>来组里又碰到了同一个学校的小师兄还是老乡，真是太幸运了，还有我组长，人都超级nice，也从他们那里学到很多</p><p>平时把需求做完，自己看看博客，看看书，学学公司所有的框架，发现公司用的框架很多都是阿里的，比起以前在工厂实习简直太爽了</p><p>实习这一段时间自己的提升真的很多，所以有机会一定要出去实习，平时我们部门还会组织技术分享，也可以增加自己的眼界，平时遇到问题，也可以快速寻求帮助，快速解决问题，知道一个公司是怎么开发产品的</p><p>最后收获最多的还是自信，刚开始觉得自己不是科班的有点不太自信，实习汇报完后小师兄说我学习能力比较强，上手快，不用让他操心，我的组长对我的评价说我达到2年的水平，哈哈，真的把我高兴坏了，我们的组长的boss也给我的评价也不错，我不是来炫耀这些，只是这些肯定给我很大的信心，让我在转行的道路上越走越有勇气，最后还是要靠自己努力，平时多写写代码，多看看书</p><p>最后感谢在我转行时所遇见的这些人。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;实习给了我很大信心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实习一段时间了，说说最近的感受吧&lt;/p&gt;
&lt;p&gt;我是转行的，现在是一名材料计算的研究生，为什么要说材料计算呢，我是希望去面试的时候至少有计算这两个字，HR至少会觉得我跟计算机有点靠边，减少被HR给过滤掉&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://blog.cuzz.site/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="实习" scheme="http://blog.cuzz.site/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习</title>
    <link href="http://blog.cuzz.site/2018/06/24/jQuery%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.cuzz.site/2018/06/24/jQuery学习/</id>
    <published>2018-06-24T15:44:39.000Z</published>
    <updated>2018-11-06T13:54:43.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jQuery是一个快速、简洁的JavaScript框架</p></blockquote><div class="note default"><p>jQuery设计的宗旨是“write Less，Do More”</p></div><a id="more"></a><h1 id="初识jQuery"><a href="#初识jQuery" class="headerlink" title="初识jQuery"></a>初识jQuery</h1><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互</p><p>总结来说为下面三点：</p><ul><li>jQuery 是一个 JavaScript </li><li>jQuery 极大地简化了 JavaScript 编程</li><li>jQuery 很容易学习</li></ul><h1 id="使用jQuery编写HelloWorld"><a href="#使用jQuery编写HelloWorld" class="headerlink" title="使用jQuery编写HelloWorld"></a>使用jQuery编写HelloWorld</h1><ul><li>下载jQuery库</li><li><p>引入jQuery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;01-初识jQuery&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-1.11.3/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写helloWorld</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;02-jQuery-HelloWorld&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-1.11.3/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 原生js的固定写法</span><br><span class="line">        window.onload = function(ev) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // jQuery的固定写法</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            alert(&quot;Hello World&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="jQuery和js入口函数的区别"><a href="#jQuery和js入口函数的区别" class="headerlink" title="jQuery和js入口函数的区别"></a>jQuery和js入口函数的区别</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function (ev) &#123;</span><br><span class="line">        // 通过原生的js入口函数可以拿到Dom元素</span><br><span class="line">        var img = document.getElementsByTagName(&quot;img&quot;)[0];</span><br><span class="line">        console.log(img);</span><br><span class="line">        // 通过原生的js入口函数可以拿到dom元素的宽高</span><br><span class="line">        var width = window.getComputedStyle(img).width;</span><br><span class="line">        console.log(width);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        // 通过jQuery入口函数可以拿到Dom元素</span><br><span class="line">        var $img = $(&quot;img&quot;)[0];</span><br><span class="line">        console.log($img);</span><br><span class="line">        // 通过jQuery入口函数不能拿到dom元素的宽高</span><br><span class="line">        var $width = $img.width();</span><br><span class="line">        console.log($width);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>区别:</p><ul><li>原生jQuery入口函数的加载模式不同</li><li>原生js会等到dom加载完毕，并且图片也加载完毕才会执行</li><li>jQuery会等到dom加载完毕，但不会等到图片也加载完毕就会执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function (ev) &#123;</span><br><span class="line">        alert(&quot;hello cuzz&quot;); // 不会显示</span><br><span class="line">    &#125;;</span><br><span class="line">    window.onload = function (ev) &#123;</span><br><span class="line">        alert(&quot;hello cuxx&quot;); // 会显示</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        alert(&quot;hello cuzz&quot;); // 会显示</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        alert(&quot;hello cuxx&quot;); // 会显示</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>区别：</p><ul><li>多个window.onload只会执行一次, 后面的会覆盖前面的</li><li>多个$(document).ready()会执行多次,后面的不会覆盖前面的</li></ul><p>原因：<br>jQuery框架本质是一个闭包，每次执行我们都会给ready函数传递一个新的函数，不同函数内部的数据不会相互干扰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        // 相当于这样写</span><br><span class="line">        var test1 = function () &#123;</span><br><span class="line">            alert(&quot;hello cuzz&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        var test2 = function () &#123;</span><br><span class="line">            alert(&quot;hello cuxx&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $(document).ready(test1);</span><br><span class="line">        $(document).ready(test2);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对比：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>window.onload</code></th><th style="text-align:center"><code>$(document).ready()</code></th></tr></thead><tbody><tr><td style="text-align:center">执行时机</td><td style="text-align:center">必须等待网页全部加载完毕(包括 图片等),然后再执行包裹代码</td><td style="text-align:center">只需要等待网页中的DOM结构 加载完毕,就能执行包裹的代码</td></tr><tr><td style="text-align:center">执行次数</td><td style="text-align:center">只能执行一次,如果第二次,那么 第一次的执行会被覆盖</td><td style="text-align:center">可以执行多次,第N次都不会被上 一次覆盖</td></tr><tr><td style="text-align:center">简写方案</td><td style="text-align:center">无</td><td style="text-align:center"><code>$(function () { });</code></td></tr></tbody></table><h1 id="jQuery的四种写法"><a href="#jQuery的四种写法" class="headerlink" title="jQuery的四种写法"></a>jQuery的四种写法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 第一种写法</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">       alert(&quot;hello cuzz&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 第二种写法</span><br><span class="line">    jQuery(document).ready(function () &#123;</span><br><span class="line">        alert(&quot;hello cuzz&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 第三种写法</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        alert(&quot;hello cuzz&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 第四种写法</span><br><span class="line">    jQuery(function () &#123;</span><br><span class="line">        alert(&quot;hello cuzz&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>推荐使用第三种写法</p><h1 id="jQuery的核心函数"><a href="#jQuery的核心函数" class="headerlink" title="jQuery的核心函数"></a>jQuery的核心函数</h1><ul><li><p>jQuery(callback)，当dom加载完成之后执行传入的回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       alert(&quot;123&quot;); </span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>jQuery([sel,[context]])，接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素,并包装成jQuery对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        // 利用jQuery获取的div,得到的是一个jQuery对象</span><br><span class="line">        var $box = $(&quot;div&quot;);</span><br><span class="line">        console.log($box);</span><br><span class="line">        </span><br><span class="line">        // 利用原生js语法获取的div,得到的是一个js对象</span><br><span class="line">        var box = document.getElementsByTagName(&quot;div&quot;);</span><br><span class="line">        console.log(box);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>原生JS对象和jQuery对象相互转换</p></li><li>jQuery(html, [ownerDoc]) 根据 HTML 标记字符串，动态创建DOM 元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        var $eles = $(&quot;&lt;p&gt;我是span&lt;/p&gt;&lt;u&gt;我是u&lt;/u&gt;&quot;);</span><br><span class="line">        // 无论是jQuery找到的还是创建的,我们最终拿到的永远都是jQuery对象</span><br><span class="line">        console.log($eles);</span><br><span class="line">        // 将创建好的DOM元素添加到body中</span><br><span class="line">        $(&quot;body&quot;).append($eles);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>jQuery的本质是一个伪数组，有0到length-1的属性</p><h1 id="jQuery静态方法"><a href="#jQuery静态方法" class="headerlink" title="jQuery静态方法"></a>jQuery静态方法</h1><ul><li><p>静态方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 定义一个类</span><br><span class="line">    function AClass() &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 给这个类添加一个静态方法</span><br><span class="line">    AClass.staticMethod = function () &#123;</span><br><span class="line">        alert(&quot;staticMethod&quot;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 静态方法的调用</span><br><span class="line">    AClass.staticMethod();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 定义一个类</span><br><span class="line">    function AClass() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 给这个类添加一个实例方法</span><br><span class="line">    AClass.prototype.instanceMethod = function () &#123;</span><br><span class="line">        alert(&quot;instanceMethod&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实例方法的调用</span><br><span class="line">    var a = new AClass();</span><br><span class="line">    a.instanceMethod();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="常用静态方法"><a href="#常用静态方法" class="headerlink" title="常用静态方法"></a>常用静态方法</h1><ul><li><p>$.each(object, [callback])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    // 遍历数组</span><br><span class="line">    var arr = [1, 3, 5, 7, 9];</span><br><span class="line">    // 通过原生方法遍历数组</span><br><span class="line">    // 第一个回调函数参数是遍历到的元素</span><br><span class="line">    // 第二个回调函数参数是当前遍历的索引</span><br><span class="line">    // 返回值: 没有返回值</span><br><span class="line">    var res = arr.forEach(function (ele, idx) &#123;</span><br><span class="line">        console.log(idx, ele);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(res);</span><br><span class="line"></span><br><span class="line">    // 通过jQuery静态方法遍历数组</span><br><span class="line">    // 第一个回调函数参数是当前遍历的索引</span><br><span class="line">    // 第二个回调函数参数是遍历到的元素</span><br><span class="line">    // 返回值: 被遍历的数组</span><br><span class="line">    var $res2 = $.each(arr, function (idx, ele) &#123;</span><br><span class="line">        console.log(idx, ele);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log($res2);</span><br><span class="line"></span><br><span class="line">    // 遍历对象</span><br><span class="line">    var obj = &#123;name: &quot;&quot;, age:&quot;33&quot;, gender:&quot;male&quot;&#125;;</span><br><span class="line">    // js对象没有forEach方法,所以通过forin方法遍历对象</span><br><span class="line">    for(var key in obj)&#123;</span><br><span class="line">        console.log(key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    // 通过jQuery静态方法遍历对象</span><br><span class="line">    $.each(obj,function (key, value) &#123;</span><br><span class="line">        console.log(key, value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>$.holdReady(hold)，传入true或false来暂停或则恢复ready()事件</p></li><li>$.trim(str) 去掉字符串起始和结尾的空格</li><li>$.isArray(obj) 判断是否是数组</li><li>$.isFunction(obj)判断是否是函数</li><li>$.isWindow(obj)判断是否是window对象<h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1>在网上，发现<a href="https://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>比较详细，排版也比较好，不再更新jQuery</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jQuery是一个快速、简洁的JavaScript框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;jQuery设计的宗旨是“write Less，Do More”&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.cuzz.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://blog.cuzz.site/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Python零基础入门笔记</title>
    <link href="http://blog.cuzz.site/2018/01/02/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.cuzz.site/2018/01/02/Python零基础入门笔记/</id>
    <published>2018-01-02T15:01:08.000Z</published>
    <updated>2018-11-05T13:31:42.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>复习是为了更好的学习更新的知识。 </p></blockquote><div class="note default"><p> 学习python有一年多了，希望通过学习笔记来复习了，也能让后来者少走一点弯路。在课程笔记的同时加入了一部分自己的经验补充。</p><ul><li>[√] 廖雪峰老师在慕课网的课程: Python入门</li></ul></div><a id="more"></a><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/La3h6131Bb.png?imageslim" alt="mark"></p><h1 id="Python的初次体验"><a href="#Python的初次体验" class="headerlink" title="Python的初次体验"></a>Python的初次体验</h1><h2 id="python语言介绍"><a href="#python语言介绍" class="headerlink" title="python语言介绍"></a>python语言介绍</h2><p>全世界有几百种编程语言，但是流行的只有十几种，python就是其中一种。荷兰人龟叔于1989年圣诞节创立。</p><p>特点：<strong>优雅，明确，简单</strong>。</p><p><strong>适合的领域：</strong></p><ul><li>web网站和各种网络服务；</li><li>系统工具和脚本；</li></ul><p>作为<strong>胶水语言</strong>把其他语言开发的模块包装起来方便使用。</p><p>Python是一门高级语言，所以<strong>不适合</strong>贴近硬件的代码:</p><ul><li>比如驱动程序（首选C）</li><li>移动开发，有各自的语言，（objectC，swift/java）</li><li>游戏开发（首选C/C++）。</li></ul><p><strong>Python实际应用：</strong></p><p>YouTube，豆瓣，搜狐邮箱；Openstack开源云计算平台。Google，Yahoo，NASA。</p><p>语言之间的对比：</p><blockquote><p>C编译为机器码；JAVA编译为字节码；python为解释执行。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1779926-cf9a89d1ed19acf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python与其他语言对比"></p><p><strong>缺点：</strong> 运行慢，Python源码不能加密。</p><h2 id="Python版本的选择"><a href="#Python版本的选择" class="headerlink" title="Python版本的选择"></a>Python版本的选择</h2><p>博主建议选择安装环境篇的进阶版：2.7版本与3.x版本共存。</p><p>3.x版本建议选择Python 3.5.1 |Anaconda 4.1.0 (64-bit)<br>以后如果要使用python进行TensorFlow windows版的配置可以省下时间。</p><h2 id="windows下安装python"><a href="#windows下安装python" class="headerlink" title="windows下安装python"></a>windows下安装python</h2><p>参考：搭建Python开发环境</p><h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><p>cmd下输入python。进入交互式环境。</p><ul><li><p>命令行模式启动python:<br><code>python</code></p></li><li><p>命令行模式执行python文件<br><code>python 目录/xxx.py</code></p></li><li><p>命令行模式关闭python：<br><code>exit()</code></p></li></ul><p>注意：不要使用word，或者windows下自带的记事本来进行代码编写。</p><p>推荐使用：</p><ul><li>轻量级：sublime Text 或 editplus</li><li>重量级(较大工程) : pycharm Professional</li></ul><p>2.7版本专属：</p><p><code>print &#39;hello,world!&#39;</code></p><p>3.x版本(2.7版本也可以正常运行)：</p><p><code>print (&quot;hello,world!&quot;)</code></p><h1 id="Python变量和数据类型"><a href="#Python变量和数据类型" class="headerlink" title="Python变量和数据类型"></a>Python变量和数据类型</h1><blockquote><p>讲解Python基本的数据类型.包括整数、浮点数、字符串和布尔类型，以及变量的概念和基本的数据运算。</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>在Python程序中，整数的表示方法和数学上的写法一模一样.</p><p>例如：1，100，-8080，0，等等。<strong>十六进制</strong>用<code>0x</code>前缀和<code>0-9</code>，<code>a-f</code>表示.</p><p>例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数: 因为<strong>按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong></p><p>比如，1.23x10^9和12.3x10^8是相等的。</p><p>浮点数可以用数学写法: 如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><p>知识点：python2与3不同整除</p><p>python2.7下：<code>/</code> 和 <code>//</code> 都是整数除法。</p><p>例: 1/2结果为0.后面小数部分会直接去除掉。</p><p>python3.x下：</p><ul><li><code>/</code> 为浮点数除法(如：<code>1/2=0.5</code>)</li><li><code>//</code>为整数除法(如: <code>1//2 = 0</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> a+b</span><br><span class="line"><span class="comment">#python2.7下想要浮点数除法就得使用类型转换。</span></span><br><span class="line"><span class="keyword">print</span> float(a)/b</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以’’或””括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分.</p><p>因此，字符串’abc’只有a，b，c这3个字符。</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来。</p><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p><p>and运算是与运算，只有所有都为 True，and运算结果才是 True。</p><p>or运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p><p>not运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p><code>None</code>不能理解为0，因为0是有意义的，而<code>None</code>是一个特殊的空值。</p><h3 id="编程小任务："><a href="#编程小任务：" class="headerlink" title="编程小任务："></a>编程小任务：</h3><ol><li>计算十进制整数 45678 和十六进制整数 0x12fd2 之和。</li><li>请用字符串表示出Learn Python in imooc。</li><li>请计算以下表达式的布尔值（注意==表示判断是否相等）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 &lt; 99</span><br><span class="line">0xff == 255</span><br></pre></td></tr></table></figure></li></ol><p>题目答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="number">45678</span>+<span class="number">0x12fd2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Learn Python in imooc"</span> </span><br><span class="line"><span class="keyword">print</span> <span class="number">100</span>&lt;<span class="number">99</span> </span><br><span class="line"><span class="keyword">print</span> <span class="number">0xff</span> == <span class="number">255</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123456</span><br><span class="line">Learn Python in imooc</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h2><p>print语句可以向屏幕上输出指定的文字。比如输出’hello, world’，用代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'hello, world'</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>当我们在Python交互式环境下编写代码时，&gt;&gt;&gt;是Python解释器的提示符，不是代码的一部分。</p></li><li><p>当我们在文本编辑器中编写代码时，千万不要自己添加 &gt;&gt;&gt;。</p></li></ul><p>print语句也可以跟上多个字符串，用逗号<code>,</code>隔开，就可以连成一串输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p>print会依次打印每个字符串，知识点：<strong>遇到逗号<code>,</code>会输出一个空格.</strong></p><p>print也可以打印整数，或者计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">300</span></span><br><span class="line"><span class="number">300</span>    <span class="comment">#运行结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">100</span> + <span class="number">200</span></span><br><span class="line"><span class="number">300</span>    <span class="comment">#运行结果</span></span><br></pre></td></tr></table></figure><p>漂亮做法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'100 + 200 ='</span>, <span class="number">100</span> + <span class="number">200</span></span><br><span class="line"><span class="number">100</span> + <span class="number">200</span> = <span class="number">300</span>     <span class="comment">#运行结果</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: 对于100 + 200，Python解释器自动计算出结果300.<br>但是，’100 + 200 =’是字符串而非数学公式，Python把它视为字符串.</p></blockquote><h3 id="编程任务：请用两种方式打印出-hello-python"><a href="#编程任务：请用两种方式打印出-hello-python" class="headerlink" title="编程任务：请用两种方式打印出 hello, python."></a>编程任务：请用两种方式打印出 hello, python.</h3><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input code</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello, python.'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>,<span class="string">'python.'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, python.</span><br><span class="line">hello, python.</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python的注释以<code>#</code>开头，后面的文字直到行尾都算注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一行全部都是注释...</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello'</span> <span class="comment"># 这也是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时不想运行下面一行代码:</span></span><br><span class="line"><span class="comment"># print 'hello, python.'</span></span><br></pre></td></tr></table></figure><p>注释还有一个巧妙的用途，就是一些代码我们不想运行，但又不想删除，就可以用注释暂时屏蔽掉：</p><h3 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务:"></a>编程任务:</h3><p>将代码编辑器中的 “print ‘hello’” 语句修改成注释语句</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 'hello'</span></span><br></pre></td></tr></table></figure><h3 id="注释：多行注释"><a href="#注释：多行注释" class="headerlink" title="注释：多行注释"></a>注释：多行注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下面是一行被注释代码</span></span><br><span class="line"><span class="string">下面是两行被注释代码</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>在Python中，变量的概念基本上和初中代数的方程变量是一致的。</p><p>例如，对于方程式<code>y=x*x</code> ，<code>x</code>就是变量。</p><p>当<code>x=2</code>时，计算结果是<code>4</code>。当<code>x=5</code>时，计算结果是<code>25</code>。</p><p>只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p><p>在Python程序中，变量是用一个变量名表示。</p><p>知识点：<strong>变量名必须是大小写英文、数字和下划线 <code>_</code> 的组合，且不能用数字开头。</strong>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">t_007 = <span class="string">'T007'</span></span><br></pre></td></tr></table></figure><p>变量a是一个整数。变量t_007是一个字符串。</p><p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>    <span class="comment"># a是整数</span></span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line">a = <span class="string">'imooc'</span>   <span class="comment"># a变为字符串</span></span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure><p>知识点: <strong>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。</strong></p><blockquote><p>静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这些是java代码</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// a是整数类型变量</span></span><br><span class="line">a = <span class="string">"mooc"</span>; <span class="comment">// 错误：不能把字符串赋给整型变量</span></span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。<br><strong>请不要把赋值语句的等号等同于数学的等号</strong>。比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">x = x + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的.</p><p>在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</p><p>最后，知识点: <strong>理解变量在计算机内存中的表示也非常重要</strong>。当我们写：a = ‘ABC’时，Python解释器干了两件事情：</p><ol><li><p>在内存中创建了一个’ABC’的字符串；</p></li><li><p>在内存中创建了一个名为a的变量，并把它指向’ABC’。</p></li></ol><p>也可以把一个变量a<strong>赋值</strong>给另一个变量b，这个操作实际上是把<strong>变量b指向变量a所指向的数据</strong>，例如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">'XYZ'</span></span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure><p>最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是’ABC’，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p><ul><li>执行<code>a = &#39;ABC&#39;</code>，解释器创建了字符串  <code>&#39;ABC&#39;</code>和变量 <code>a</code>，并把<code>a</code>指向 <code>&#39;ABC&#39;</code>：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1779926-fab133818b593823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示意图"></p><p>执行<code>b = a</code>，解释器创建了变量 <code>b</code>，并把b指向 a 指向的字符串<code>&#39;ABC&#39;</code>：</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-e1ff488b5d0c3fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><p>执行<code>a = &#39;XYZ&#39;</code>，解释器创建了字符串<code>&#39;XYZ&#39;</code>，并把a的指向改为’XYZ’，但b并没有更改：</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-9f8b48cc8ad9685a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><p>所以，最后打印变量b的结果自然是’ABC’了。</p><h3 id="编程任务："><a href="#编程任务：" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>等差数列可以定义为每一项与它的前一项的差等于一个常数，可以用变量 x1 表示等差数列的第一项，用 d 表示公差，请计算数列</p></blockquote><p>1 4 7 10 13 16 19 …</p><p>前 100 项的和。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">x100 = x1+(<span class="number">100</span><span class="number">-1</span>)*d</span><br><span class="line">s2 = (x1+x100)*<span class="number">100</span>/<span class="number">2</span></span><br><span class="line">s = n*x1+n*(n<span class="number">-1</span>)*d/<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> s,s2</span><br></pre></td></tr></table></figure><p>等差数列公式：</p><ul><li><code>（首项+尾项）*项数/2</code></li><li><code>项数*首项+项数*(项数-1)*公差/2</code></li></ul><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14950 14950</span><br></pre></td></tr></table></figure><h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>字符串可以用<code>&#39;&#39;</code>或者<code>&quot;&quot;</code>括起来表示。</p><p>如果字符串本身包含<code>&#39;</code>怎么办？比如我们要表示字符串 <code>I&#39;m OK</code>，这时，可以用<code>&quot; &quot;</code>括起来表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"I'm OK"</span></span><br><span class="line"><span class="string">'Learn "Python" in imooc'</span></span><br></pre></td></tr></table></figure><p>类似的，知识点: <strong>如果字符串包含<code>&quot;</code>，我们就可以用<code>&#39; &#39;</code>括起来表示：</strong></p><p>如果字符串既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？</p><p>知识点：转义</p><p>这个时候，就需要对字符串的某些特殊字符进行<strong><code>转义</code></strong>，Python字符串用<code>\</code>进行转义。</p><p>要表示字符串 <code>Bob said &quot;I&#39;m OK&quot;.</code><br>由于 <code>&#39;</code> 和<code>&quot;</code>会引起歧义，因此，我们在它前面插入一个<code>\</code>表示这是一个<strong>普通字符</strong>，不代表字符串的起始，因此，这个字符串又可以表示为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Bob said \"I\'m OK\".'</span></span><br><span class="line"><span class="comment"># 在要保留原状的字符串前面加上右斜杠</span></span><br></pre></td></tr></table></figure><p>注意：转义字符 <code>\</code>不计入字符串的内容中。</p><p>常用的转义字符还有：</p><ul><li><code>\n</code>表示换行</li><li><code>\t</code> 表示一个制表符</li><li><code>\\</code> 表示 <code>\</code> 字符本身</li></ul><h3 id="编程任务：-1"><a href="#编程任务：-1" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>请将下面两行内容用Python的字符串表示并打印出来：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　Python was started in 1989 by &quot;Guido&quot;.</span><br><span class="line">　　Python is free and easy to learn.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Python was started in 1989 by"Guido".\nPython is free and easy to learn.'</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h2 id="raw字符串与多行字符串"><a href="#raw字符串与多行字符串" class="headerlink" title="raw字符串与多行字符串"></a>raw字符串与多行字符串</h2><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，我们可以在字符串前面加个前缀 <code>r</code> ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'\(~_~)/ \(~_~)/'</span></span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/BK0i3279fC.png?imageslim" alt="mark"></p><p>解释：</p><blockquote><p>这个例子举得不是很好。<br>可以看出raw加上之后。可能产生误会的<code>\</code>被修改为<code>\\</code>(<code>\\</code> 表示 <code>\</code> 字符本身)</p></blockquote><ul><li>不加上r 只有<code>\</code>和<code>(</code>并没有合成转义字符。</li><li>加上r。<code>\</code>需要被转义，经过转义后显示出来还是自己。</li></ul><h3 id="知识点-个人小题-r的强大作用"><a href="#知识点-个人小题-r的强大作用" class="headerlink" title="知识点: 个人小题(r的强大作用)"></a>知识点: 个人小题(r的强大作用)</h3><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/DBiBm2mH4I.png?imageslim" alt="mark"></p><p>上图效果可以看出r的强大作用。</p><p>但是<code>r&#39;我是一段字符&#39;</code>表示法不能表示多行字符串(<code>r&#39;&#39;&#39;一段字符&#39;&#39;&#39;</code>)，也不能表示包含<code>&#39;</code>和 <code>&quot;</code>的字符串（为什么？）</p><p>因为如果<code>r&#39;mtian&#39;yan&#39;</code> </p><blockquote><p>r遇到左边第一个<code>&#39;</code>,会继续往后找闭合的标志<code>&#39;</code>然后找到mtian的地方。它任务结束了。代码继续往下执行。当扫到yan这里他就会报错。</p></blockquote><p>???(更深层待续)</p><p>或者<code>r&quot;mtian&quot;yan&quot;</code></p><p>或导致r提前结束掉。后面的就无法继续匹配到对应的。</p><p>知识点: 多行字符串，可以用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Line 1</span></span><br><span class="line"><span class="string">Line 2</span></span><br><span class="line"><span class="string">Line 3'''</span></span><br><span class="line"><span class="comment">#上面这个字符串的表示方法和下面的是完全一样的：</span></span><br><span class="line"><span class="string">'Line 1\nLine 2\nLine 3'</span></span><br></pre></td></tr></table></figure><p>还可以在多行字符串前面添加 r ，把这个多行字符串也变成一个raw字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'''Python is created by "Guido".</span></span><br><span class="line"><span class="string">It is free and easy to learn.</span></span><br><span class="line"><span class="string">Let's start learn Python in imooc!'''</span></span><br></pre></td></tr></table></figure><h3 id="编程任务：-2"><a href="#编程任务：-2" class="headerlink" title="编程任务："></a>编程任务：</h3><p>请把下面的字符串用<code>r&#39;&#39;&#39;...&#39;&#39;&#39;</code>的形式改写，并用print打印出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;\&quot;To be, or not to be\&quot;: that is the question.\nWhether it\&apos;s nobler in the mind to suffer.&apos;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">r'''"To be,or not to be":that is the question.</span></span><br><span class="line"><span class="string">Whether it's nobler in the mind to suffer.'''</span></span><br></pre></td></tr></table></figure><h2 id="知识点-Unicode字符串"><a href="#知识点-Unicode字符串" class="headerlink" title="知识点: Unicode字符串"></a>知识点: Unicode字符串</h2><p>字符串还有一个编码问题。</p><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用<strong>8个比特（bit）作为一个字节（byte）</strong>，所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为<strong>ASCII编码</strong>，比如大写字母 A 的编码是65，小写字母 z 的编码是122。</p><p>如果要表示中文，显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<strong>GB2312编码</strong>，用来把中文编进去。</p><p>类似的，日文和韩文等其他语言也有这个问题。为了统一所有文字的编码，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>Unicode通常用<strong>两个字节表示一个字符</strong>，<strong>原有的英文编码从单字节变成双字节，只需要把高字节全部填为0就可以</strong>。</p><p>因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串’ABC’在Python内部都是ASCII编码的。</p><p>Python在后来添加了对Unicode的支持，<strong>以Unicode表示的字符串用u’…’表示</strong>，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">u'中文'</span></span><br><span class="line">中文</span><br><span class="line">注意: 不加 u ，中文就不能正常显示。(这个应该是很早版本才会。笔者现在已经无法复现)</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/I4CCjDGJfk.png?imageslim" alt="mark"></p><p>转载: <a href="http://blog.csdn.net/lxdcyh/article/details/4018054" target="_blank" rel="noopener">http://blog.csdn.net/lxdcyh/article/details/4018054</a></p><p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码<code>decode</code>成unicode，再从unicode编码<code>encode</code>成另一种编码。 </p><ul><li><p><code>decode</code>的作用是将其他编码的字符串转换成<code>unicode</code>编码，如<code>str1.decode(&#39;gb2312&#39;)</code>，表示将<code>gb2312</code>编码的字符串<code>str1</code>转换成<code>unicode</code>编码。</p></li><li><p><code>encode</code>的作用是将<code>unicode</code>编码转换成其他编码的字符串，如<code>str2.encode(‘gb2312’)</code>，表示将<code>unicode</code>编码的字符串<code>str2</code>转换成<code>gb2312</code>编码</p></li><li><p>代码中字符串的默认编码与代码文件本身的编码一致。 </p></li></ul><p>如：s=’中文’</p><blockquote><p>如果是在utf8的文件中，该字符串就是utf8编码，如果是在gb2312的文件中，则其编码为gb2312。这种情况下，要进行编码转换，都需要先用decode方法将其转换成unicode编码，再使用encode方法将其转换成其他编码。<strong>通常，在没有指定特定的编码方式时，都是使用的系统默认编码创建的代码文件</strong></p></blockquote><p>如果字符串是这样定义：s=u’中文’</p><p>则该字符串的编码就被指定为unicode了，即python的内部编码，而与代码文件本身的编码无关。因此，对于这种情况做编码转换，<strong>只需要直接使用<code>encode</code>方法</strong>将其转换成指定编码即可。</p><p>如果一个字符串已经是unicode了，再进行解码则将出错，因此通常要对其编码方式是否为unicode进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isinstance(s, unicode) </span><br><span class="line"><span class="comment">#用来判断是否为unicode</span></span><br></pre></td></tr></table></figure><p>用非unicode编码形式的str来<code>encode</code>会报错 </p><p>如何获得系统的默认编码？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line">import sys</span><br><span class="line">print sys.getdefaultencoding()</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/JFE34FFdKK.png?imageslim" alt="mark"></p><p>该段程序在Win10(1079)上输出为：ascii </p><p>在某些IDE中，字符串的输出总是出现乱码，甚至错误，<strong>其实是由于IDE的结果输出控制台自身不能显示字符串的编码，而不是程序本身的问题。</strong></p><p>如在UliPad(注:UliPad是wxPython的动力，导向和灵活的编程器)中运行如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=u&quot;中文&quot;</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><p>会提示：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1: ordinal not in range(128)。<br>这是因为UliPad在控制台信息输出窗口是按照ascii编码输出的（系统的默认编码是ascii），而上面代码中的字符串是Unicode编码的，所以输出时产生了错误。</p><p>将最后一句改为：<code>print s.encode(&#39;gb2312&#39;)</code></p><p>则能正确输出“中文”两个字。</p><p>若最后一句改为：<code>print s.encode(&#39;utf8&#39;)</code></p><p>则输出：/xe4/xb8/xad/xe6/x96/x87，这是控制台信息输出窗口按照ascii编码输出utf8编码的字符串的结果。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/mgK170h8i2.png?imageslim" alt="mark"></p><p><code>unicode(str,&#39;gb2312&#39;)</code>与<code>str.decode(&#39;gb2312&#39;)</code>是一样的，都是将gb2312编码的str转为unicode编码 </p><p>使用<code>str.__class__</code>可以查看str的编码形式为str类型。</p><p>window默认编码gbk；linux默认编码utf8 </p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/06C1AfbGII.png?imageslim" alt="mark"></p><p>原理说了半天，最后来个包治百病的吧：<br>(天涯)：下面代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCoding</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取编码格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(strInput, unicode):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unicode"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        strInput.decode(<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'utf8'</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        strInput.decode(<span class="string">"gbk"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'gbk'</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran2UTF8</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    转化为utf8格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    strCodingFmt = getCoding(strInput)</span><br><span class="line">    <span class="keyword">if</span> strCodingFmt == <span class="string">"utf8"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"unicode"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.encode(<span class="string">"utf8"</span>)</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"gbk"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.decode(<span class="string">"gbk"</span>).encode(<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran2GBK</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    转化为gbk格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    strCodingFmt = getCoding(strInput)</span><br><span class="line">    <span class="keyword">if</span> strCodingFmt == <span class="string">"gbk"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"unicode"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.encode(<span class="string">"gbk"</span>)</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"utf8"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.decode(<span class="string">"utf8"</span>).encode(<span class="string">"gbk"</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isinstance(s, unicode):  </span><br><span class="line"><span class="comment">#s=u"中文"  </span></span><br><span class="line">    <span class="keyword">print</span> s.encode(<span class="string">'gb2312'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"我是Unicode编码的"</span></span><br><span class="line"><span class="keyword">elif</span> getCoding(s) == <span class="string">"utf8"</span>:  </span><br><span class="line"><span class="comment">#s="中文"  </span></span><br><span class="line">    <span class="keyword">print</span> s.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gb2312'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"我是utf-8编码的"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> s.decode(<span class="string">'gbk'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"我是gbk编码的"</span></span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/hG4I9Ckj6D.png?imageslim" alt="mark"></p><p>上图结果一：以utf-8格式保存的py文件。<br>图二：以ascii格式保存的py文件。</p><p>编码检测包 chardet </p><p>知识点：因此，转码的时候一定要先搞明白，<strong>字符串str是什么编码，然后decode成unicode，然后再encode成其他编码</strong></p><p>插入数据库报错的解决方案:<br>UnicodeDecodeError: ‘ascii’ codec can’t decode byte </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf8&apos;)</span><br></pre></td></tr></table></figure><p>Unicode字符串除了多了一个 u 之外，与普通字符串没啥区别，转义字符和多行表示法仍然有效：</p><p>转义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">u'中文\n日文\n韩文'</span></span><br><span class="line"><span class="comment">#多行：</span></span><br><span class="line"></span><br><span class="line"><span class="string">u'''第一行</span></span><br><span class="line"><span class="string">第二行'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#raw+多行：</span></span><br><span class="line"></span><br><span class="line"><span class="string">ur'''Python的Unicode字符串支持"中文",</span></span><br><span class="line"><span class="string">"日文",</span></span><br><span class="line"><span class="string">"韩文"等多种语言'''</span></span><br></pre></td></tr></table></figure><p>如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#简洁版</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure><p>目的是告诉Python解释器，用UTF-8编码读取源代码。<br>然后用Notepad++ 另存为… 并选择UTF-8格式保存。</p><h3 id="编程任务：-3"><a href="#编程任务：-3" class="headerlink" title="编程任务："></a>编程任务：</h3><p>用多行Unicode字符串表示下面的唐诗并打印：</p><p>静夜思</p><p>床前明月光，<br>疑是地上霜。<br>举头望明月，<br>低头思故乡。</p><p>知识点: <a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0263/</a></p><p>python定义文件编码到底用哪种？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># coding=&lt;encoding name&gt; </span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: &lt;encoding name&gt; -*-</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># vim: set fileencoding=&lt;encoding name&gt; :</span><br></pre></td></tr></table></figure><p>这些都可以只要第一二行能满足如下正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This Python file uses the following encoding: utf-8</span></span><br><span class="line"><span class="comment"># 花式标明</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'''静夜思</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">床前明月光，</span></span><br><span class="line"><span class="string">疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，</span></span><br><span class="line"><span class="string">低头思故乡。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>如果不标明文件编码或找不到。python会默认你是ASCII</p><h2 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h2><p>Python支持对整数和浮点数直接进行四则混合运算，运算规则和数学上的四则运算规则完全一致。</p><p>基本的运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span>   <span class="comment"># ==&gt; 6</span></span><br><span class="line"><span class="number">4</span> * <span class="number">5</span> - <span class="number">6</span>   <span class="comment"># ==&gt; 14</span></span><br><span class="line"><span class="number">7.5</span> / <span class="number">8</span> + <span class="number">2.1</span>   <span class="comment"># ==&gt; 3.0375</span></span><br></pre></td></tr></table></figure><p>使用括号可以提升优先级，这和数学运算完全一致，注意只能使用小括号，但是括号可以嵌套很多层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span>    <span class="comment"># ==&gt; 9</span></span><br><span class="line">(<span class="number">2.2</span> + <span class="number">3.3</span>) / (<span class="number">1.5</span> * (<span class="number">9</span> - <span class="number">0.3</span>))    <span class="comment"># ==&gt; 0.42145593869731807</span></span><br></pre></td></tr></table></figure><p>和数学运算不同的地方是，Python的整数运算结果仍然是整数，浮点数运算结果仍然是浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>    <span class="comment"># ==&gt; 整数 3</span></span><br><span class="line"><span class="number">1.0</span> + <span class="number">2.0</span>    <span class="comment"># ==&gt; 浮点数 3.0</span></span><br></pre></td></tr></table></figure><p>但是整数和浮点数混合运算的结果就变成浮点数了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2.0</span>    <span class="comment"># ==&gt; 浮点数 3.0</span></span><br></pre></td></tr></table></figure><p>为什么要区分整数运算和浮点数运算呢？</p><p>这是因为整数运算的结果永远是精确的，而浮点数运算的结果不一定精确，因为计算机内存再大，也无法精确表示出无限循环小数，比如 0.1 换成二进制表示就是无限循环小数。</p><p>那整数的除法运算遇到除不尽的时候，结果难道不是浮点数吗？我们来试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> / <span class="number">4</span>    <span class="comment"># ==&gt; 2</span></span><br></pre></td></tr></table></figure><p>令很多初学者惊讶的是，Python的整数除法，即使除不尽，结果仍然是整数，余数直接被扔掉。不过，Python提供了一个<strong>求余</strong>的运算 % 可以计算余数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> % <span class="number">4</span>    <span class="comment"># ==&gt; 3</span></span><br></pre></td></tr></table></figure><p>如果我们要计算 <code>11 / 4</code> 的精确结果，按照“整数和浮点数混合运算的结果是浮点数”的法则，把两个数中的一个变成浮点数再运算就没问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.0</span> / <span class="number">4</span>    <span class="comment"># ==&gt; 2.75</span></span><br></pre></td></tr></table></figure><h3 id="编程任务：-4"><a href="#编程任务：-4" class="headerlink" title="编程任务："></a>编程任务：</h3><p>请计算 2.5 + 10 / 4 ,并解释计算结果为什么不是期望的 5.0 ?</p><p>请修复上述运算，使得计算结果是 5.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="number">2.5</span> + <span class="number">10.0</span> / <span class="number">4</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.0</span><br></pre></td></tr></table></figure><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>我们已经了解了Python支持布尔类型的数据，布尔类型只有True和False两种值，但是布尔类型有以下几种运算：</p><p><strong>与运算</strong>：只有两个布尔值都为 True 时，计算结果才为 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br></pre></td></tr></table></figure><p><strong>或运算</strong>：只要有一个布尔值为 True，计算结果就是 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br></pre></td></tr></table></figure><p><strong>非运算</strong>：把True变为False，或者把False变为True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><p>布尔运算在计算机中用来做<strong>条件判断</strong>，根据计算结果为<code>True</code>或者<code>False</code>，计算机可以自动执行不同的后续代码。</p><p>在Python中，布尔类型还可以与其他数据类型做 <code>and</code>、<code>or</code>和<code>not</code>运算，请看下面的代码：</p><p>知识点：<strong>Python把0、空字符串’’和None看成 False</strong>，<strong>其他数值和非空字符串都看成 True。短路运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">print</span> a <span class="keyword">and</span> <span class="string">'a=T'</span> <span class="keyword">or</span> <span class="string">'a=F'</span></span><br></pre></td></tr></table></figure><p>计算结果不是布尔类型，而是字符串 <code>&#39;a=T&#39;</code>，这是为什么呢？</p><p>因为<strong>Python把0、空字符串’’和None看成 False</strong>，<strong>其他数值和非空字符串都看成 True</strong>，所以：</p><p>True and ‘a=T’ 计算结果是 ‘a=T’<br>继续计算 ‘a=T’ or ‘a=F’ 计算结果还是 ‘a=T’<br>要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：<strong>短路计算</strong>。</p><ol><li><p>在计算 <code>a and b</code>时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</p></li><li><p>在计算 <code>a or b</code> 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。</p></li></ol><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/58ebLDfjkH.png?imageslim" alt="mark"></p><p>所以Python解释器在做布尔运算时，<strong>只要能提前确定计算结果，它就不会往后算了，直接返回结果</strong>。</p><h3 id="编码任务："><a href="#编码任务：" class="headerlink" title="编码任务："></a>编码任务：</h3><p>请运行如下代码，并解释打印的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'python'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, a <span class="keyword">or</span> <span class="string">'world'</span></span><br><span class="line">b = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, b <span class="keyword">or</span> <span class="string">'world'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="string">'python'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, a <span class="keyword">or</span> <span class="string">'world'</span></span><br><span class="line"><span class="comment">#a为非空，则输出a</span></span><br><span class="line">b = <span class="string">''</span></span><br><span class="line"><span class="comment">#b为空，输出world</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, b <span class="keyword">or</span> <span class="string">'world'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, python</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><h1 id="Python集合类型-list和tuple"><a href="#Python集合类型-list和tuple" class="headerlink" title="Python集合类型:list和tuple"></a>Python集合类型:list和tuple</h1><h2 id="创建list"><a href="#创建list" class="headerlink" title="创建list"></a>创建list</h2><p>Python内置的一种数据类型是列表：<code>list</code>。list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>比如，列出班里所有同学的名字，就可以用一个list表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>list是数学意义上的有序集合，也就是说，list中的元素是按照顺序排列的。</p><p>构造list非常简单，按照上面的代码，直接用 <code>[ ]</code>把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates <span class="comment"># 打印classmates变量的内容</span></span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，我们完全可以在list中包含各种数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Michael&apos;, 100, True]</span><br></pre></td></tr></table></figure><p>一个元素也没有的list，就是空list：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; empty_list = []</span><br></pre></td></tr></table></figure><h3 id="编程任务-1"><a href="#编程任务-1" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设班里有3名同学：Adam，Lisa和Bart，他们的成绩分别是 95.5，85 和 59，请按照 名字, 分数, 名字, 分数… 的顺序按照分数从高到低用一个list表示，然后打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="number">95.5</span>,<span class="string">'Lisa'</span>, <span class="number">85</span>,  <span class="string">'Bart'</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, 95.5, &apos;Lisa&apos;, 85, &apos;Bart&apos;, 59]</span><br></pre></td></tr></table></figure><p>注：list本身就是有序的。所以直接打印即可。</p><h2 id="Python按照索引访问list"><a href="#Python按照索引访问list" class="headerlink" title="Python按照索引访问list"></a>Python按照索引访问list</h2><p>由于list是一个有序集合，所以，我们可以用一个list按分数从高到低表示出班里的3个同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>那我们如何从list中获取指定第 N 名的同学呢？方法是通过索引来获取list中的指定元素。</p><p>需要特别注意的是，<strong>索引从 0 开始</strong>，也就是说，第一个元素的索引是0，第二个元素的索引是1，以此类推。</p><p>因此，要打印第一名同学的名字，用 L[0]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[0]</span><br><span class="line">Adam</span><br><span class="line"></span><br><span class="line">#要打印第二名同学的名字，用 L[1]:</span><br><span class="line">&gt;&gt;&gt; print L[1]</span><br><span class="line">Lisa</span><br><span class="line"></span><br><span class="line">#要打印第三名同学的名字，用 L[2]:</span><br><span class="line">&gt;&gt;&gt; print L[2]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>要打印第四名同学的名字，用 L[3]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[3]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>报错了！IndexError意思就是索引超出了范围，因为上面的list只有3个元素，有效的索引是 0，1，2。</p><p>所以，使用索引时，<strong>千万注意不要越界</strong>。</p><h3 id="编程任务-2"><a href="#编程任务-2" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>三名同学的成绩可以用一个list表示：L = [95.5, 85, 59]</p></blockquote><p>请按照索引分别打印出第一名、第二名、第三名，同时测试 print L[3]。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">95.5</span>,<span class="number">85</span>,<span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 5, in </span><br><span class="line">    print L[3]</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">95.5</span><br><span class="line">85</span><br><span class="line">59</span><br></pre></td></tr></table></figure><p>知识点：正序从0开始，逆序从-1开始是最好一个list内容。</p><p>当索引数字为负数时，表示逆序读出List中的内容，记住List的最后一个空间的编号为-1开始</p><h2 id="倒序访问list"><a href="#倒序访问list" class="headerlink" title="倒序访问list"></a>倒序访问list</h2><p>我们还是用一个list按分数从高到低表示出班里的3个同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>这时，老师说，请分数最低的同学站出来。</p><p>要写代码完成这个任务，我们可以先数一数这个 list，发现它包含3个元素，因此，最后一个元素的索引是2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[2]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>Bart同学是最后一名，俗称<strong>倒数第一</strong>，所以，我们可以用 -1 这个索引来表示最后一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-1</span>]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>Bart同学表示躺枪。</p><p>类似的，倒数第二用 -2 表示，倒数第三用 -3 表示，倒数第四用 -4 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-2</span>]</span><br><span class="line">Lisa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-3</span>]</span><br><span class="line">Adam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-4</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">L[<span class="number">-4</span>] 报错了，因为倒数第四不存在，一共只有<span class="number">3</span>个元素。</span><br></pre></td></tr></table></figure><p>使用倒序索引时，也要注意<strong>不要越界。</strong></p><h3 id="编程任务-3"><a href="#编程任务-3" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>三名同学的成绩可以用一个list表示：L = [95.5, 85, 59]</p></blockquote><p>请按照倒序索引分别打印出倒数第一、倒数第二、倒数第三。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-3</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-4</span>]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 5, in </span><br><span class="line">    print L[-4]</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">59</span><br><span class="line">85</span><br><span class="line">95.5</span><br></pre></td></tr></table></figure><h2 id="list添加新元素-append-insert"><a href="#list添加新元素-append-insert" class="headerlink" title="list添加新元素(append insert)"></a>list添加新元素(append insert)</h2><p>现在，班里有3名同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>今天，班里转来一名新同学 Paul，如何把新同学添加到现有的 list 中呢？</p><p>第一个办法是用 list 的 <code>append()</code> 方法，把新同学追加到 list 的末尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">&gt;&gt;&gt; L.append(&apos;Paul&apos;)</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>append()总是把新的元素添加到 list 的尾部。</p><p>如果 Paul 同学表示自己总是考满分，要求添加到第一的位置，怎么办？</p><p>方法是用list的 <code>insert()</code>方法，它接受两个参数，第一个参数是索引号，第二个参数是待添加的新元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">&gt;&gt;&gt; L.insert(0, &apos;Paul&apos;)</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p><code>L.insert(0, &#39;Paul&#39;)</code> 的意思是，’Paul’将被添加到索引为 0 的位置上（也就是第一个），而原来索引为 0 的Adam同学，以及后面的所有同学，都自动向后移动一位。</p><h3 id="编程任务-4"><a href="#编程任务-4" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设新来一名学生Paul，Paul 同学的成绩比Bart好，但是比Lisa差，他应该排到第三名的位置，请用代码实现。</p></blockquote><p>代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L.insert(<span class="number">2</span>,<span class="string">'paul'</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'paul'</span>, <span class="string">'Bart'</span>]</span><br></pre></td></tr></table></figure><p>正向第三名索引号为2.倒数第三名索引号为-3</p><h2 id="list删除元素-pop"><a href="#list删除元素-pop" class="headerlink" title="list删除元素(pop)"></a>list删除元素(pop)</h2><p>Paul同学刚来几天又要转走了，那么我们怎么把Paul 从现有的list中删除呢？</p><p>如果Paul同学排在最后一个，我们可以用list的pop()方法删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">&gt;&gt;&gt; L.pop()</span><br><span class="line">&apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>pop()方法总是<strong>删掉list的最后一个元素，并且它还返回这个元素，</strong>所以我们执行 L.pop() 后，会打印出 ‘Paul’。</p><p>如果Paul同学不是排在最后一个怎么办？比如Paul同学排在第三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>要把Paul踢出list，我们就必须先定位Paul的位置。由于Paul的索引是2，因此，用 pop(2)把Paul删掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L.pop(2)</span><br><span class="line">&apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>两种方式：直接<code>pop()</code>默认删除第一个，括号内指定参数：索引，删除索引位置上。</p><h3 id="编码任务"><a href="#编码任务" class="headerlink" title="编码任务"></a>编码任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>Paul的索引是2，Bart的索引是3，如果我们要把Paul和Bart都删掉，请解释下面的代码为什么不能正确运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L.pop(2)</span><br><span class="line">L.pop(3)</span><br></pre></td></tr></table></figure><p>怎样调整代码可以把Paul和Bart都正确删除掉？</p><p>解释：因为语句是按顺序执行的删除了Paul之后。<br>索引号3已经越界。我们要删除的Bart已经变成2了。</p><p>知识点：这教育我们删除list时要秉着从前到后顺序。</p><h2 id="List替换元素"><a href="#List替换元素" class="headerlink" title="List替换元素"></a>List替换元素</h2><p>假设现在班里仍然是3名同学：</p><p><code>&gt;&gt;&gt; L = [&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></p><p>现在，Bart同学要转学走了，碰巧来了一个Paul同学，要更新班级成员名单，我们可以先把Bart删掉，再把Paul添加进来。</p><p>另一个办法是直接用Paul把Bart给替换掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[2] = &apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>对list中的某一个索引赋值，就可以直接用新的元素<strong>替换</strong>掉原来的元素，list包含的元素个数保持不变。</p><p>由于Bart还可以用 -1 做索引，因此，下面的代码也可以完成同样的替换工作：</p><p><code>&gt;&gt;&gt; L[-1] = &#39;Paul&#39;</code></p><h3 id="编程任务-5"><a href="#编程任务-5" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>班里的同学按照分数排名是这样的：L = [‘Adam’, ‘Lisa’, ‘Bart’]<br>但是，在一次考试后，Bart同学意外取得第一，而Adam同学考了倒数第一。</p></blockquote><p>请通过对list的索引赋值，生成新的排名。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L[<span class="number">0</span>]=<span class="string">'Bart'</span></span><br><span class="line">L[<span class="number">-1</span>]=<span class="string">'Adam'</span></span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure><h2 id="创建tuple"><a href="#创建tuple" class="headerlink" title="创建tuple"></a>创建tuple</h2><p>tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，知识点：<strong>tuple一旦创建完毕，就不能修改了。</strong></p><p>同样是表示班里同学的名称，用tuple表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;)</span><br></pre></td></tr></table></figure><p>创建tuple和创建list唯一不同之处是用( )替代了[ ]。</p><p>现在，这个 t 就不能改变了，tuple没有 <code>append()</code>方法，也没有<code>insert()</code>和<code>pop()</code>方法。所以，新同学没法直接往 tuple 中添加，老同学想退出 tuple 也不行。</p><p>获取 tuple 元素的方式和 list 是一模一样的，我们可以正常使用 <code>t[0]</code>，<code>t[-1]</code>等索引方式访问元素，但是不能赋值成别的元素，不信可以试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t[0] = &apos;Paul&apos;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &apos;tuple&apos; object does not support item assignment</span><br></pre></td></tr></table></figure><h3 id="编程任务-6"><a href="#编程任务-6" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>创建一个tuple，顺序包含0 - 9这10个数。</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure><h2 id="创建单元素tuple"><a href="#创建单元素tuple" class="headerlink" title="创建单元素tuple"></a>创建单元素tuple</h2><p>tuple和list一样，可以包含 0 个、1个和任意多个元素。</p><p>包含多个元素的 tuple，前面我们已经创建过了。</p><p>包含 0 个元素的 tuple，也就是空tuple，直接用 ()表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = ()</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>创建包含1个元素的 tuple 呢？来试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>好像哪里不对！t 不是 tuple ，而是整数1。为什么呢？</p><p>知识点：单元素tuple的<code>()</code>被当做优先级。<code>(1)</code>变成整数1.单元素括号结尾加<code>,</code></p><p>因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。</p><p>正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号<code>,</code>，这样就避免了歧义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1,)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure><p>Python在打印单元素tuple时，也自动添加了一个<code>,</code>，为了更明确地告诉你这是一个tuple。</p><p>多元素 tuple 加不加这个额外的<code>,</code>效果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1, 2, 3,)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(1, 2, 3)</span><br></pre></td></tr></table></figure><h3 id="编程任务-7"><a href="#编程任务-7" class="headerlink" title="编程任务"></a>编程任务</h3><p>下面代码为什么没有创建出包含一个学生的 tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>请修改代码，确保 t 是一个tuple。</p><p>因为单元素tuple的括号被当做是优先级标志。要加上额外<code>,</code>标识这是一个元组。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>,)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;Adam&apos;,)</span><br></pre></td></tr></table></figure><h2 id="“可变”的tuple-指向不变。指向的东西可以变"><a href="#“可变”的tuple-指向不变。指向的东西可以变" class="headerlink" title="“可变”的tuple(指向不变。指向的东西可以变)"></a>“可变”的tuple(指向不变。指向的东西可以变)</h2><p>前面我们看到了tuple一旦创建就不能修改。现在，我们来看一个<code>可变</code>的tuple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br></pre></td></tr></table></figure><p>注意到 t 有 3 个元素：<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code>和一个<code>list：[&#39;A&#39;, &#39;B&#39;]</code>。list作为一个整体是tuple的第3个元素。list对象可以通过 <code>t[2]</code> 拿到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = t[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 然后，我们把list的两个元素改一改：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>] = <span class="string">'Y'</span></span><br></pre></td></tr></table></figure><p>再看看tuple的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure><p>不是说tuple一旦定义后就不可变了吗？怎么现在又变了？</p><p>别急，我们先看看定义的时候tuple包含的3个元素：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/dgm7ajFg6J.png?imageslim" alt="mark"></p><p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/lcLgC2adk4.png?imageslim" alt="mark"></p><p>表面上看，tuple的元素确实变了，但其实变的不是 tuple 的元素，而是list的元素。</p><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的<strong>“不变”</strong>是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，<strong>但指向的这个list本身是可变的！</strong></p><p>理解了<code>指向不变</code>后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p><h3 id="编程任务：-5"><a href="#编程任务：-5" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>定义了tuple：t = (‘a’, ‘b’, [‘A’, ‘B’])</p></blockquote><p>由于 t 包含一个list元素，导致tuple的内容是可变的。能否修改上述代码，让tuple内容不可变？</p><p>解答：将里面的list替换成一个不可变的元素。比如tuple。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;))</span><br><span class="line">print t</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;))</span><br></pre></td></tr></table></figure><h1 id="Python的条件判断和循环语句"><a href="#Python的条件判断和循环语句" class="headerlink" title="Python的条件判断和循环语句"></a>Python的条件判断和循环语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p><p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，可以用if语句实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'your age is'</span>, age</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'END'</span></span><br></pre></td></tr></table></figure><p>注意: Python代码的<code>缩进规则</code>。<strong>具有相同缩进的代码被视为代码块，</strong>上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。</p><p>知识点: <strong>缩进请严格按照Python的习惯写法：4个空格，不要使用Tab</strong>，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。</p><p>注意: if 语句后接表达式，然后用:表示代码块开始。</p><p>如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age = 20</span><br><span class="line">&gt;&gt;&gt; if age &gt;= 18:</span><br><span class="line">...     print &apos;your age is&apos;, age</span><br><span class="line">...     print &apos;adult&apos;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your age is 20</span><br><span class="line">adult</span><br></pre></td></tr></table></figure><h3 id="编程任务-8"><a href="#编程任务-8" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果成绩达到60分或以上，视为passed。</p></blockquote><p>假设Bart同学的分数是75，请用if语句判断是否能打印出 passed:</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">75</span></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passed</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><p>当 if 语句判断表达式的结果为 True 时，就会执行 if 包含的代码块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br></pre></td></tr></table></figure><p>如果我们想判断年龄在18岁以下时，打印出 ‘teenager’，怎么办？</p><p>方法是再写一个 if:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>或者用 <code>not</code> 运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>细心的同学可以发现，这两种条件判断是“非此即彼”的，要么符合条件1，要么符合条件2，因此，完全可以用一个 <code>if ... else ...</code> 语句把它们统一起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>利用 <code>if ... else ...</code>语句，我们可以根据条件表达式的值为 <code>True</code> 或者 <code>False</code> ，分别执行 if 代码块或者 else 代码块。</p><p>注意: else 后面有个<code>:</code>。</p><h3 id="编程任务-9"><a href="#编程任务-9" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果成绩达到60分或以上，视为passed，否则视为failed。</p></blockquote><p>假设Bart同学的分数是55，请用if语句打印出 passed 或者 failed:</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">55</span></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br></pre></td></tr></table></figure><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><p>有的时候，一个 if … else … 还不够用。比如，根据年龄的划分：</p><ul><li>条件1：18岁或以上：adult</li><li>条件2：6岁或以上：teenager</li><li>条件3：6岁以下：kid</li></ul><p>我们可以用一个 if age &gt;= 18 判断是否符合条件1，如果不符合，再通过一个 if 判断 age &gt;= 6 来判断是否符合条件2，否则，执行条件3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    if age &gt;= 6:</span><br><span class="line">        print &apos;teenager&apos;</span><br><span class="line">    else:</span><br><span class="line">        print &apos;kid&apos;</span><br></pre></td></tr></table></figure><p>这样写出来，我们就得到了一个两层嵌套的 if … else … 语句。这个逻辑没有问题，但是，如果继续增加条件，比如3岁以下是 baby：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    if age &gt;= 6:</span><br><span class="line">        print &apos;teenager&apos;</span><br><span class="line">    else:</span><br><span class="line">        if age &gt;= 3:</span><br><span class="line">            print &apos;kid&apos;</span><br><span class="line">        else:</span><br><span class="line">            print &apos;baby&apos;</span><br></pre></td></tr></table></figure><p>这种缩进只会越来越多，代码也会越来越难看。</p><p><strong>要避免嵌套结构的 if … else …，</strong>我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 3:</span><br><span class="line">    print &apos;kid&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;baby&apos;</span><br></pre></td></tr></table></figure><p><code>elif</code> 意思就是 <code>else if</code>。这样一来，我们就写出了结构非常清晰的一系列条件判断。</p><p><strong>特别注意</strong>: 这一系列条件判断会从上到下依次判断，如果某个判断为 True，执行完对应的代码块，后面的条件判断就直接忽略，不再执行了。</p><p>请思考下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 8</span><br><span class="line">if age &gt;= 6:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;kid&apos;</span><br></pre></td></tr></table></figure><p>当 age = 8 时，结果正确，但 age = 20 时，为什么没有打印出 adult？</p><p>如果要修复，应该如何修复？</p><p>知识点解答: 因为当age=20.第一个条件&gt;=6满足就短路了。<br>因此我们在设置条件应该从严格到松泛.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;kid&apos;</span><br></pre></td></tr></table></figure><h3 id="编程任务-10"><a href="#编程任务-10" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果按照分数划定结果：</p></blockquote><ul><li>90分或以上：excellent</li><li>80分或以上：good</li><li>60分或以上：passed</li><li>60分以下：failed</li></ul><p>请编写程序根据分数打印结果。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'excellent'</span></span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'good'</span></span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">good</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>list或tuple可以表示一个有序集合。如果我们想依次访问一个list中的每一个元素呢？比如 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>如果list只包含几个元素，这样写还行，如果list包含1万个元素，我们就不可能写1万行print。</p><p>这时，<code>循环</code>就派上用场了。</p><p>Python的 for 循环就可以依次把list或tuple的每个元素迭代出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">for name in L:</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>注意:  name 这个变量是在 for 循环中定义的(这是一个临时变量名字可自定义)，意思是，依次取出list中的每一个元素，并把元素赋值给 name，然后执行for循环体（就是缩进的代码块）。</p><p>这样一来，遍历一个list或tuple就非常容易了。</p><h3 id="编程任务-11"><a href="#编程任务-11" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>班里考试后，老师要统计平均成绩，已知4位同学的成绩用list表示如下：L = [75, 92, 59, 68]</p></blockquote><p>请利用for循环计算出平均成绩。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">75</span>, <span class="number">92</span>, <span class="number">59</span>, <span class="number">68</span>]</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">    sum =sum+x</span><br><span class="line"><span class="keyword">print</span> sum / <span class="number">4</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">73.5</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>和 for 循环不同的另一种循环是 <code>while</code> 循环，while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束。</p><p>比如要从 0 开始打印不大于 N 的整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 10</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; N:</span><br><span class="line">    print x</span><br><span class="line">    x = x + 1</span><br></pre></td></tr></table></figure><p>while循环每次先判断 <code>x &lt; N</code>，如果为True，则执行循环体的代码块,否则，退出循环。</p><p>在循环体内，x = x + 1 会让 x 不断增加，最终因为 x &lt; N 不成立而退出循环。</p><p>如果没有这一个语句，while循环在判断 x &lt; N 时总是为True，就会无限循环下去，变成死循环，所以要特别留意while循环的<strong>退出条件。</strong></p><h3 id="编程任务-12"><a href="#编程任务-12" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用while循环计算100以内奇数的和。</p></blockquote><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">while x&lt;=100:</span><br><span class="line">    sum=sum+x</span><br><span class="line">    x=x+2</span><br><span class="line">print sum</span><br></pre></td></tr></table></figure><p>知识点: 奇数只需要从1开始不断加2都是奇数。</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2500</span><br></pre></td></tr></table></figure><h2 id="break退出循环"><a href="#break退出循环" class="headerlink" title="break退出循环"></a>break退出循环</h2><p>用<code>for</code> 循环或者 <code>while</code> 循环时，如果要在循环体内直接退出循环，可以使用 <code>break 语句</code>。</p><p>比如计算1至100的整数和，我们用while来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">while True:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    x = x + 1</span><br><span class="line">    if x &gt; 100:</span><br><span class="line">        break</span><br><span class="line">print sum</span><br></pre></td></tr></table></figure><p>咋一看， while True 就是一个死循环，但是在循环体内，我们还判断了 x &gt; 100 条件成立时，用break语句退出循环，这样也可以实现循环的结束。</p><h3 id="编程任务-13"><a href="#编程任务-13" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用 while True 无限循环配合 break 语句，计算 1 + 2 + 4 + 8 + 16 + … 的前20项的和。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sum =sum+x</span><br><span class="line">    x =<span class="number">2</span>*x</span><br><span class="line">    n =n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;<span class="number">20</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1048575</span><br></pre></td></tr></table></figure><h2 id="continue继续循环"><a href="#continue继续循环" class="headerlink" title="continue继续循环"></a>continue继续循环</h2><p>在循环过程中，可以用<code>break</code>退出当前循环，还可以用<code>continue</code>跳过后续循环代码，继续下一次循环。</p><p>假设我们已经写好了利用for循环计算平均分的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = [75, 98, 59, 81, 66, 43, 69, 85]</span><br><span class="line">sum = 0.0</span><br><span class="line">n = 0</span><br><span class="line">for x in L:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    n = n + 1</span><br><span class="line">print sum / n</span><br></pre></td></tr></table></figure><p>现在老师只想统计及格分数的平均分，就要把 <code>x &lt; 60</code> 的分数剔除掉，这时，利用<code>continue</code>，可以做到当 <code>x &lt; 60</code>的时候，不继续执行循环体的后续代码，直接进入下一次循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for x in L:</span><br><span class="line">    if x &lt; 60:</span><br><span class="line">        continue</span><br><span class="line">    sum = sum + x</span><br><span class="line">    n = n + 1</span><br></pre></td></tr></table></figure><p>coutinue: 跳过下面的代码。开始下一次循环。</p><h3 id="编程任务-14"><a href="#编程任务-14" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>对已有的计算 0 - 100 的while循环进行改造，通过增加 continue 语句，使得只计算奇数的和：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>思路: if判断到是偶数，continue跳过。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sum = sum+x</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2500</span><br></pre></td></tr></table></figure><h2 id="多重循环-嵌套循环"><a href="#多重循环-嵌套循环" class="headerlink" title="多重循环(嵌套循环)"></a>多重循环(嵌套循环)</h2><p>在循环内部，还可以嵌套循环，我们来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for x in [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]:</span><br><span class="line">    for y in [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]:</span><br><span class="line">        print x + y</span><br></pre></td></tr></table></figure><p><code>x</code> 每循环一次，<code>y</code>就会循环 3 次，这样，我们可以打印出一个全排列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A1</span><br><span class="line">A2</span><br><span class="line">A3</span><br><span class="line">B1</span><br><span class="line">B2</span><br><span class="line">B3</span><br><span class="line">C1</span><br><span class="line">C2</span><br><span class="line">C3</span><br></pre></td></tr></table></figure><h3 id="编程任务-15"><a href="#编程任务-15" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>对100以内的两位数，请使用一个两重循环打印出所有十位数数字比个位数数字小的数，例如，23（2 &lt; 3）。</p></blockquote><p>代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tens_place = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">ones_place = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tens_place:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> ones_place:</span><br><span class="line">        <span class="keyword">if</span> x&lt;y:</span><br><span class="line">            <span class="keyword">print</span> x*<span class="number">10</span> + y</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">23</span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="重要的数据类型Dict和Set"><a href="#重要的数据类型Dict和Set" class="headerlink" title="重要的数据类型Dict和Set"></a>重要的数据类型Dict和Set</h1><h2 id="什么是dict"><a href="#什么是dict" class="headerlink" title="什么是dict"></a>什么是dict</h2><p>我们已经知道，list 和 tuple 可以用来表示顺序集合，例如，班里同学的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>或者考试的成绩列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[95, 85, 59]</span><br></pre></td></tr></table></figure><p>但是，要根据名字找到对应的成绩，用两个 list 表示就不方便。</p><p>如果把名字和分数关联起来，组成类似的查找表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;Adam&apos; ==&gt; 95</span><br><span class="line">&apos;Lisa&apos; ==&gt; 85</span><br><span class="line">&apos;Bart&apos; ==&gt; 59</span><br></pre></td></tr></table></figure><p>给定一个名字，就可以直接查到分数。</p><p>Python的 <code>dict</code> 就是专门干这件事的。用 dict 表示<code>名字-成绩</code>的查找表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把名字称为<code>key</code>，对应的成绩称为<code>value</code>，dict就是通过 <code>key</code>来查找 <code>value</code>。</p><p>花括号 <code>{}</code> 表示这是一个dict，然后按照 <code>key: value</code>, 写出来即可。<strong>最后一个 key: value 的逗号可以省略。</strong></p><p>知识点： 区别小课堂</p><ul><li>单元素的tuple必须在后面多加一个逗号。</li><li>dict最后的逗号可以省略</li></ul><p>由于dict也是集合，<code>len()</code> 函数可以计算任意集合的大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(d)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>知识点：<strong>注意: 一个 key-value 算一个，因此，dict大小为3。</strong></p><h3 id="编程任务-16"><a href="#编程任务-16" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>新来的Paul同学成绩是 75 分，请编写一个dict，把Paul同学的成绩也加进去。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59,</span><br><span class="line">    &apos;Paul&apos;: 75</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问dict"><a href="#访问dict" class="headerlink" title="访问dict"></a>访问dict</h2><p>我们已经能创建一个dict，用于表示名字和成绩的对应关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，如何根据名字来查找对应的成绩呢？</p><p>可以简单地使用 <code>d[key]</code> 的形式来查找对应的 value，这和 list 很像，不同之处是，list 必须使用索引返回对应的元素，而dict使用key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d[&apos;Adam&apos;]</span><br><span class="line">95</span><br><span class="line">&gt;&gt;&gt; print d[&apos;Paul&apos;]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br><span class="line">KeyError: &apos;Paul&apos;</span><br></pre></td></tr></table></figure><p>注意: 通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：<code>KeyError</code>。</p><p>知识点：避免 KeyError 发生，有两个办法：</p><ul><li>是先判断一下 key 是否存在，用 <code>in</code> 操作符：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if &apos;Paul&apos; in d:</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>如果 ‘Paul’ 不存在，if语句判断为False，自然不会执行 print d[‘Paul’] ，从而避免了错误。</p><ul><li>是使用dict本身提供的一个<code>get</code>方法，在Key不存在的时候，返回None：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d.get(&apos;Bart&apos;)</span><br><span class="line">59</span><br><span class="line">&gt;&gt;&gt; print d.get(&apos;Paul&apos;)</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h3 id="编程任务-17"><a href="#编程任务-17" class="headerlink" title="编程任务"></a>编程任务</h3><p>根据如下dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请打印出：<br>Adam: 95<br>Lisa: 85<br>Bart: 59</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">print &apos;Adam:&apos;,d[&apos;Adam&apos;]</span><br><span class="line">print &apos;Lisa:&apos;,d.get(&apos;Lisa&apos;)</span><br><span class="line">print &apos;Bart:&apos;,d[&apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Adam: 95</span><br><span class="line">Lisa: 85</span><br><span class="line">Bart: 59</span><br></pre></td></tr></table></figure><h2 id="dict的特点"><a href="#dict的特点" class="headerlink" title="dict的特点"></a>dict的特点</h2><p><strong>知识点</strong>：dict查找速度快。list查找速度随着元素增加而逐渐下降。<br>缺点：内存占用大。list慢但内存占用小。</p><p>dict的第一个特点是<code>查找速度快</code>，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。</p><p>不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。</p><p>由于dict是按 key 查找，所以，<strong>在一个dict中，key不能重复。</strong></p><p>dict的第二个特点就是存储的key-value序对是<code>没有顺序</code>的！这和list不一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图打印这个dict时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure><p>打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明 知识点:<strong>dict内部是无序的，不能用dict存储有序的集合。</strong></p><p>知识点：dict的第三个特点是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。 但是list是可变的，就不能作为 key。</p><p>可以试试用list作为key时会报什么样的错误。</p><p>不可变这个限制仅作用于key，value是否可变无所谓：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &apos;123&apos;: [1, 2, 3],  # key 是 str，value是list</span><br><span class="line">    123: &apos;123&apos;,  # key 是 int，value 是 str</span><br><span class="line">    (&apos;a&apos;, &apos;b&apos;): True  # key 是 tuple，并且tuple的每个元素都是不可变对象，value是 boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的key还是字符串，因为用起来最方便。</p><h3 id="编程任务-18"><a href="#编程任务-18" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请设计一个dict，可以根据分数来查找名字，已知成绩如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Adam: 95,</span><br><span class="line">Lisa: 85,</span><br><span class="line">Bart: 59.</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">     95:&apos;Adam&apos;,</span><br><span class="line">     85:&apos;Lisa&apos;,</span><br><span class="line">     59:&apos;Bart&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：无</p><h2 id="更新dict"><a href="#更新dict" class="headerlink" title="更新dict"></a>更新dict</h2><p>dict是可变的，也就是说，我们可以随时往dict中添加新的 <code>key-value</code>。比如已有dict：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把新同学’Paul’的成绩 72 加进去，用赋值语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Paul&apos;] = 72</span><br></pre></td></tr></table></figure><p>再看看dict的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure><p><strong>如果 key 已经存在，则赋值会用新的 value 替换掉原来的 value：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Bart&apos;] = 60</span><br><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60&#125;</span><br></pre></td></tr></table></figure><h3 id="编程任务-19"><a href="#编程任务-19" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请根据Paul的成绩 72 更新下面的dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line"></span><br><span class="line">    95: &apos;Adam&apos;,</span><br><span class="line"></span><br><span class="line">    85: &apos;Lisa&apos;,</span><br><span class="line"></span><br><span class="line">    59: &apos;Bart&apos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="number">95</span>: <span class="string">'Adam'</span>,</span><br><span class="line">    <span class="number">85</span>: <span class="string">'Lisa'</span>,</span><br><span class="line">    <span class="number">59</span>: <span class="string">'Bart'</span></span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">72</span>] = <span class="string">'Paul'</span></span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;72: &apos;Paul&apos;, 59: &apos;Bart&apos;, 85: &apos;Lisa&apos;, 95: &apos;Adam&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历dict"><a href="#遍历dict" class="headerlink" title="遍历dict"></a>遍历dict</h2><p>由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过 for 循环实现。</p><p>直接使用for循环可以遍历 dict 的 <code>key</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> key</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Lisa</span><br><span class="line">Adam</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>由于通过 <code>key</code> 可以获取对应的 <code>value</code>，因此，在循环体内，可以获取到value的值。</p><p>注：这里的key只是一个约定俗称的变量，可以改为其他名字。但是推荐用key。</p><h3 id="编程任务-20"><a href="#编程任务-20" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用 for 循环遍历如下的dict，打印出 name: score 来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">for key in d:</span><br><span class="line">    print key+&quot;:&quot;,d[key]</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisa: 85</span><br><span class="line">Adam: 95</span><br><span class="line">Bart: 59</span><br></pre></td></tr></table></figure><h2 id="什么是set"><a href="#什么是set" class="headerlink" title="什么是set"></a>什么是set</h2><p>dict的作用是建立一组 <code>key</code> 和一组 <code>value</code> 的映射关系，dict的key是<strong>不能重复的</strong>。</p><p>有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，目的就是<strong>保证这个集合的元素不会重复，</strong>这时，set就派上用场了。</p><p>set 持有一系列元素，这一点和 list 很像，但是set的元素<strong>没有重复，而且是无序的</strong>，这点和 dict 的 key很像。</p><p>知识点: 创建 set 的方式是<strong>调用 set() 并传入一个 list</strong>，list的元素将作为set的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">可以查看 set 的内容：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>])</span><br></pre></td></tr></table></figure><p>请注意，上述打印的形式类似 list， 但它不是 list，仔细看还可以发现，<strong>打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。</strong></p><p>因为set不能包含重复的元素，所以，当我们传入包含重复元素的 list 会怎么样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])</span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br><span class="line">&gt;&gt;&gt; len(s)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>结果显示，set会<strong>自动去掉重复的元素</strong>，原来的list有4个元素，但set只有3个元素。</p><h3 id="编程任务-21"><a href="#编程任务-21" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用set表示班里的4位同学：Adam, Lisa, Bart, Paul</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>])</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set([&apos;Lisa&apos;, &apos;Paul&apos;, &apos;Adam&apos;, &apos;Bart&apos;])</span><br></pre></td></tr></table></figure><h2 id="访问set"><a href="#访问set" class="headerlink" title="访问set"></a>访问set</h2><p>由于set存储的是<strong>无序集合</strong>，所以我们<strong>没法通过索引</strong>来访问。</p><p>访问 set中的某个元素实际上就是判断一个元素是否在set中。</p><p>例如，存储了班里同学名字的set：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])</span><br></pre></td></tr></table></figure><p>我们可以用 <code>in</code> 操作符判断：</p><p>Bart是该班的同学吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;Bart&apos; in s</span><br><span class="line">True</span><br><span class="line">Bill是该班的同学吗？</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &apos;Bill&apos; in s</span><br><span class="line">False</span><br><span class="line">bart是该班的同学吗？</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &apos;bart&apos; in s</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>知识点：<strong>大小写很重要</strong>，’Bart’ 和 ‘bart’被认为是两个不同的元素。</p><h3 id="编程任务-22"><a href="#编程任务-22" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>由于上述set不能识别小写的名字，请改进set，使得 ‘adam’ 和 ‘bart’都能返回True。</p></blockquote><p>既然大小写是不同的。那我们的set中就把大小写都包含。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>,<span class="string">'adam'</span>, <span class="string">'lisa'</span>, <span class="string">'bart'</span>, <span class="string">'paul'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'adam'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">print</span> <span class="string">'bart'</span> <span class="keyword">in</span> s</span><br></pre></td></tr></table></figure><p>运行结果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="set的特点"><a href="#set的特点" class="headerlink" title="set的特点"></a>set的特点</h2><p><strong>set的内部结构和dict很像，唯一区别是不存储value</strong>，因此，判断一个元素是否在set中<code>速度很快</code>。</p><p><strong>set存储的元素和dict的key类似，必须是不变对象</strong>，因此，任何可变对象是不能放入set中的。</p><p>最后，set存储的元素也是没有顺序的。</p><p>set的这些特点，可以应用在哪些地方呢？</p><p>星期一到星期日可以用字符串<code>&#39;MON&#39;, &#39;TUE&#39;, ... &#39;SUN&#39;</code>表示。</p><p>假设我们让用户输入星期一至星期日的某天，如何判断用户的输入是否是一个有效的星期呢？</p><p>可以用 if 语句判断，但这样做非常繁琐：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'???'</span> <span class="comment"># 用户输入的字符串</span></span><br><span class="line"><span class="keyword">if</span> x!= <span class="string">'MON'</span> <span class="keyword">and</span> x!= <span class="string">'TUE'</span> <span class="keyword">and</span> x!= <span class="string">'WED'</span> ... <span class="keyword">and</span> x!= <span class="string">'SUN'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></span><br></pre></td></tr></table></figure><p>注意：if 语句中的…表示没有列出的其它星期名称，测试时，请输入完整。</p><p>如果事先创建好一个set，包含<code>&#39;MON&#39; ~ &#39;SUN&#39;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;])</span><br></pre></td></tr></table></figure><p>再判断输入是否有效，只需要判断该字符串是否在set中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'???'</span> <span class="comment"># 用户输入的字符串</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">in</span> weekdays:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></span><br><span class="line">这样一来，代码就简单多了。</span><br></pre></td></tr></table></figure><h3 id="编程任务-23"><a href="#编程任务-23" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>月份也可以用set表示，请设计一个set并判断用户输入的月份是否有效。<br>月份可以用字符串<code>&#39;Jan&#39;, &#39;Feb&#39;, ...</code>表示。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">months = set([<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>,<span class="string">'Aug'</span>,<span class="string">'Sep'</span>,<span class="string">'Oct'</span>,<span class="string">'Nov'</span>,<span class="string">'Dec'</span>])</span><br><span class="line">x1 = <span class="string">'Feb'</span></span><br><span class="line">x2 = <span class="string">'Sun'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x1 <span class="keyword">in</span> months:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x1: ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x1: error'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x2 <span class="keyword">in</span> months:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x2: ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x2: error'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1: ok</span><br><span class="line">x2: error</span><br></pre></td></tr></table></figure><h2 id="遍历set"><a href="#遍历set" class="headerlink" title="遍历set"></a>遍历set</h2><p>由于 set 也是一个集合，所以，遍历 set 和遍历 list 类似，都可以通过 for 循环实现。</p><p>直接使用 for 循环可以遍历 set 的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Lisa</span><br><span class="line">Adam</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>注意: 观察 for 循环在遍历set时，<strong>元素的顺序和list的顺序很可能是不同的，</strong>而且不同的机器上运行的结果也可能不同。</p><h3 id="编程任务-24"><a href="#编程任务-24" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用 for 循环遍历如下的set，打印出 name: score 来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])</span><br></pre></td></tr></table></figure><p>上面这个set中的每一个元素又是一个字典。</p><p><code>set([ ])</code>是壳子。</p><p><code>(&#39;Adam&#39;, 95), (&#39;Lisa&#39;, 85), (&#39;Bart&#39;, 59)</code>才是真正的内容</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([(<span class="string">'Adam'</span>, <span class="number">95</span>), (<span class="string">'Lisa'</span>, <span class="number">85</span>), (<span class="string">'Bart'</span>, <span class="number">59</span>)])</span><br><span class="line"><span class="keyword">for</span> name,score <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">print</span> name,<span class="string">':'</span>,score</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisa : 85</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br></pre></td></tr></table></figure><h2 id="更新set-add-remove"><a href="#更新set-add-remove" class="headerlink" title="更新set(add remove)"></a>更新set(add remove)</h2><p>由于set存储的是一组不重复的无序元素，因此，更新set主要做两件事：</p><ul><li>是把新的元素添加到set中</li><li>是把已有元素从set中删除。(前提是如果有)</li></ul><p>添加元素时，用set的<code>add()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>如果添加的元素已经存在于set中，<code>add()</code>不会报错，但是不会加进去了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>删除set中的元素时，用set的<code>remove()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>如果删除的元素不存在set中，remove()会<strong>报错</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s.remove(4)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 4</span><br></pre></td></tr></table></figure><p>所以用<code>add()</code>可以直接添加，而<code>remove()</code>前需要判断。</p><h3 id="编程任务-25"><a href="#编程任务-25" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>针对下面的set，给定一个list，对list中的每一个元素，如果在set中，就将其删除，如果不在set中，就添加进去。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Paul'</span>])</span><br><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> s:</span><br><span class="line">        s.remove(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s.add(name)</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h1 id="函数定义与调用"><a href="#函数定义与调用" class="headerlink" title="函数定义与调用"></a>函数定义与调用</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>我们知道圆的面积计算公式为：</p><p>S = πr²</p><p>当我们知道半径r的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r1 = 12.34</span><br><span class="line">r2 = 9.08</span><br><span class="line">r3 = 73.1</span><br><span class="line">s1 = 3.14 * r1 * r1</span><br><span class="line">s2 = 3.14 * r2 * r2</span><br><span class="line">s3 = 3.14 * r3 * r3</span><br></pre></td></tr></table></figure><p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把3.14改成3.14159265359的时候，得全部替换。</p><p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用 <code>s = area_of_circle(x)</code>，而函数 <code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p><p><strong>抽象</strong>是数学中非常常见的概念。举个例子：</p><p>计算数列的和，比如：1 + 2 + 3 + … + 100，写起来十分不方便，于是数学家发明了求和符号<code>∑</code>，可以把1 + 2 + 3 + … + 100记作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">∑n</span><br><span class="line">n=1</span><br></pre></td></tr></table></figure><p>这种抽象记法非常强大，因为我们看到<code>∑</code>就可以理解成求和，而不是还原成低级的加法运算。</p><p>而且，这种抽象记法是可扩展的，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">∑(n²+1)</span><br><span class="line">n=1</span><br></pre></td></tr></table></figure><p>还原成加法运算就变成了：</p><p><code>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)</code><br>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。</p><p>写计算机程序也是一样，<strong>函数就是最基本的一种代码抽象的方式。</strong></p><p>Python不但能非常灵活地定义函数，而且本身<strong>内置</strong>了很多有用的函数，可以直接调用。</p><h3 id="编程任务-26"><a href="#编程任务-26" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>写一个函数</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = area_of_circle(x)</span><br><span class="line">area_of_circle(x)</span><br></pre></td></tr></table></figure><p>运行结果：</p><h2 id="调用函数-内置函数"><a href="#调用函数-内置函数" class="headerlink" title="调用函数,内置函数"></a>调用函数,内置函数</h2><p>Python内置了很多有用的函数，我们可以直接调用。</p><p>要调用一个函数，需要知道<strong>函数的名称</strong>和<strong>参数</strong>，比如求绝对值的函数 <code>abs</code>，它接收一个参数。</p><p>可以直接从Python的官方网站查看文档：<br><a href="http://docs.python.org/2/library/functions.html#abs" target="_blank" rel="noopener">http://docs.python.org/2/library/functions.html#abs</a></p><p>也可以在交互式命令行通过 <code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p><p>调用 abs 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">100</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-20</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12.34</span></span><br></pre></td></tr></table></figure><p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs(1, 2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: abs() takes exactly one argument (2 given)</span><br></pre></td></tr></table></figure><p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是<strong>错误的参数类型</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs(&apos;a&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: bad operand type for abs(): &apos;str&apos;</span><br></pre></td></tr></table></figure><p>而比较函数 cmp(x, y) 就需要两个参数，如果 <code>x&lt;y</code>，返回 <code>-1</code>，如果 <code>x==y</code>，返回<code>0</code>，如果 <code>x&gt;y</code>，返回 <code>1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cmp(1, 2)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; cmp(2, 1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; cmp(3, 3)</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Python内置的常用函数还包括<strong>数据类型转换函数</strong>，比如   <code>int()</code>函数可以把其他数据类型转换为整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&apos;123&apos;)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; int(12.34)</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><code>str()</code>函数把其他类型转换成 <code>str</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str(123)</span><br><span class="line">&apos;123&apos;</span><br><span class="line">&gt;&gt;&gt; str(1.23)</span><br><span class="line">&apos;1.23&apos;</span><br></pre></td></tr></table></figure><h3 id="编程任务-27"><a href="#编程任务-27" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>sum()函数接受一个list作为参数，并返回list所有元素之和。请计算 <code>1*1 + 2*2 + 3*3 + ... + 100*100</code>。</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">L = []</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">100</span>:</span><br><span class="line">    L.append(x * x)</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> sum(L)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">338350</span><br></pre></td></tr></table></figure><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>在Python中，定义一个函数要使用 <code>def</code> 语句，依次写出<code>函数名</code>、<code>括号</code>、<code>括号中的参数</code>和<code>冒号</code>:，然后，在缩进块中编写函数体，函数的返回值用 <code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的 my_abs 函数为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure><p>请注意，<strong>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。</strong>因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>知识点； <strong>如果没有return语句，函数执行完毕后也会返回结果，</strong>只是结果为 <code>None</code>。<br><code>return None</code>可以简写为<code>return</code>。</p><h3 id="编程任务-28"><a href="#编程任务-28" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请定义一个 <code>square_of_sum</code> 函数，它接受一个list，返回list中每个元素平方的和。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_of_sum</span><span class="params">(L)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        sum = x*x+sum</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> square_of_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> square_of_sum([<span class="number">-5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">55</span><br><span class="line">900</span><br></pre></td></tr></table></figure><h2 id="函数之返回”多值”"><a href="#函数之返回”多值”" class="headerlink" title="函数之返回”多值”"></a>函数之返回”多值”</h2><p>函数可以返回多个值吗？答案是肯定的。</p><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><p><code>math</code>包提供了<code>sin()</code>和 <code>cos()</code>函数，我们先用<code>import</code>引用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">def move(x, y, step, angle):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure><p>这样我们就可以同时获得返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print x, y</span><br><span class="line">151.961524227 70.0</span><br></pre></td></tr></table></figure><p>但其实这只是一种<strong>假象，Python函数返回的仍然是单一值：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print r</span><br><span class="line">(151.96152422706632, 70.0)</span><br></pre></td></tr></table></figure><p>知识点：<strong>用print打印返回结果，原来返回值是一个tuple！</strong></p><p>但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，知识点：<strong>Python的函数返回多值其实就是返回一个tuple，</strong>但写起来更方便。</p><h3 id="编程任务-29"><a href="#编程任务-29" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>一元二次方程的定义是：<code>ax² + bx + c = 0</code></p></blockquote><p>请编写一个函数，返回一元二次方程的两个解。</p><p>注意：Python的math包提供了sqrt()函数用于计算平方根。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_equation</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    t = math.sqrt(b*b - <span class="number">4</span>*a*c)</span><br><span class="line">    <span class="keyword">return</span> (-b + t) / (<span class="number">2</span> * a),( -b - t )/ (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quadratic_equation(<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> quadratic_equation(<span class="number">1</span>, <span class="number">-6</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/h09hfm97EA.png?imageslim" alt="mark"></p><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(0.0, -1.5)</span><br><span class="line">(5.0, 1.0)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>在函数内部，可以调用其他函数。知识点: <strong>如果一个函数在内部调用自身本身，这个函数就是递归函数。</strong></p><p>举个例子，我们来计算阶乘 <code>n! = 1 * 2 * 3 * ... * n</code>，用函数 <code>fact(n)</code>表示，可以看出：</p><p><code>fact(n) = n! = 1 * 2 * 3 * ... * (n-1) * n = (n-1)! * n = fact(n-1) * n</code><br>所以，<code>fact(n)</code>可以表示为 <code>n * fact(n-1)</code>，只有<code>n=1</code>时需要特殊处理。</p><p>于是，fact(n)用递归的方式写出来就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fact(n):</span><br><span class="line">    if n==1:</span><br><span class="line">        return 1</span><br><span class="line">    return n * fact(n - 1)</span><br></pre></td></tr></table></figure><p>上面就是一个递归函数。可以试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fact(1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; fact(5)</span><br><span class="line">120</span><br><span class="line">&gt;&gt;&gt; fact(100)</span><br><span class="line">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><br></pre></td></tr></table></figure><p>如果我们计算fact(5)，可以根据函数定义看到计算过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">===&gt; fact(5)</span><br><span class="line">===&gt; 5 * fact(4)</span><br><span class="line">===&gt; 5 * (4 * fact(3))</span><br><span class="line">===&gt; 5 * (4 * (3 * fact(2)))</span><br><span class="line">===&gt; 5 * (4 * (3 * (2 * fact(1))))</span><br><span class="line">===&gt; 5 * (4 * (3 * (2 * 1)))</span><br><span class="line">===&gt; 5 * (4 * (3 * 2))</span><br><span class="line">===&gt; 5 * (4 * 6)</span><br><span class="line">===&gt; 5 * 24</span><br><span class="line">===&gt; 120</span><br></pre></td></tr></table></figure><p>递归函数的优点是<strong>定义简单，逻辑清晰</strong>。知识点: 理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</p><p>知识点: 使用递归函数需要注意防止<code>栈溢出</code>。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试计算 <code>fact(10000)</code>。</p><h3 id="编程任务-天涯"><a href="#编程任务-天涯" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>汉诺塔 (<a href="http://baike.baidu.com/view/191666.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/191666.htm</a>) 的移动也可以看做是递归函数。</p></blockquote><p>我们对柱子编号为a, b, c，将所有圆盘从a移到c可以描述为：</p><p>如果a只有一个圆盘，可以直接移动到c；</p><p>如果a有N个圆盘，可以看成a有1个圆盘（底盘） + (N-1)个圆盘，首先需要把 (N-1) 个圆盘移动到 b，然后，将 a的最后一个圆盘移动到c，再将b的(N-1)个圆盘移动到c。</p><p>请编写一个函数，给定输入 n, a, b, c，打印出移动的步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move(n, a, b, c)</span><br></pre></td></tr></table></figure><p>例如，输入 move(2, ‘A’, ‘B’, ‘C’)，打印出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n, a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    move(n<span class="number">-1</span>, a, c, b)</span><br><span class="line">    <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">    move(n<span class="number">-1</span>, b, a, c)</span><br><span class="line">move(<span class="number">4</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br><span class="line">A --&gt; B</span><br><span class="line">C --&gt; A</span><br><span class="line">C --&gt; B</span><br><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br><span class="line">B --&gt; A</span><br><span class="line">C --&gt; A</span><br><span class="line">B --&gt; C</span><br><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br></pre></td></tr></table></figure><h2 id="定义默认参数"><a href="#定义默认参数" class="headerlink" title="定义默认参数"></a>定义默认参数</h2><p>定义函数的时候，还可以有默认参数。</p><p>例如Python自带的 <code>int()</code> 函数，其实就有两个参数，我们既可以传一个参数，又可以传两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&apos;123&apos;)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; int(&apos;123&apos;, 8)</span><br><span class="line">83</span><br></pre></td></tr></table></figure><p>知识点: <code>int()</code>函数的第二个参数是<strong>转换进制</strong>，如果不传，默认是十进制 (base=10)，如果传了，就用传入的参数。</p><p>可见，函数的默认参数的作用是<strong>简化调用</strong>，你只需要把必须的参数传进去。但是在需要的时候，又可以传入额外的参数来覆盖默认参数值。</p><p>我们来定义一个计算 <code>x</code> 的<code>N次方</code>的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>假设计算平方的次数最多，我们就可以把 n 的默认值设定为 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def power(x, n=2):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><p>这样一来，计算平方就不需要传入两个参数了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>知识点: 由于函数的参数按从左到右的顺序匹配，所以<strong>默认参数只能定义在必需参数的后面：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># OK:</span><br><span class="line">def fn1(a, b=1, c=2):</span><br><span class="line">    pass</span><br><span class="line"># Error:</span><br><span class="line">def fn2(a=1, b):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>个人: 这里我们可以把自己想象成计算机。在自己感到为难不知道哪个是哪个的时候。<br>那么恭喜你，计算机也不知道。</p><h3 id="编程任务-30"><a href="#编程任务-30" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请定义一个 <code>greet()</code>函数，它包含一个默认参数，如果没有传入，打印 <code>&#39;Hello, world.&#39;</code>，如果传入，打印 <code>&#39;Hello, xxx.&#39;</code></p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(x = <span class="string">'World'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Hello,'</span>+x+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">greet()</span><br><span class="line">greet(<span class="string">'mtianyan'</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,World.</span><br><span class="line">Hello,mtianyan.</span><br></pre></td></tr></table></figure><h2 id="知识点-定义可变参数"><a href="#知识点-定义可变参数" class="headerlink" title="知识点: 定义可变参数"></a>知识点: 定义可变参数</h2><p>如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> args</span><br></pre></td></tr></table></figure><p>可变参数的名字前面有个 * 号，我们可以传入0个、1个或多个参数给可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'a'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><p>可变参数也不是很神秘，Python解释器会把传入的<code>一组参数</code>组装成一个<code>tuple</code>传递给<code>可变参数</code>，因此，在函数内部，直接把变量 <code>args</code> 看成一个 <code>tuple</code> 就好了。</p><p>定义可变参数的目的也是为了简化调用。假设我们要计算任意个数的平均值，就可以定义一个可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(*args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这样，在调用的时候，可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; average()</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; average(1, 2)</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; average(1, 2, 2, 3, 4)</span><br><span class="line">2.4</span><br></pre></td></tr></table></figure><h3 id="编程任务-31"><a href="#编程任务-31" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请编写接受可变参数的 average() 函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def average(*args):</span><br><span class="line">    sum = 0.0</span><br><span class="line">    if len(args) == 0:</span><br><span class="line">        return sum</span><br><span class="line">    for x in args:</span><br><span class="line">        sum = sum + x</span><br><span class="line">    return sum / len(args)</span><br><span class="line">print average()</span><br><span class="line">print average(1, 2)</span><br><span class="line">print average(1, 2, 2, 3, 4)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.0</span><br><span class="line">1.5</span><br><span class="line">2.4</span><br></pre></td></tr></table></figure><h1 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h1><h2 id="对list进行切片"><a href="#对list进行切片" class="headerlink" title="对list进行切片"></a>对list进行切片</h2><p>取一个list的<strong>部分元素</strong>是非常常见的操作。比如，一个list如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>取前3个元素，应该怎么做？</p><p>笨办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [L[0], L[1], L[2]]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>之所以是笨办法是因为扩展一下，取前N个元素就没辙了。</p><p>取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = []</span><br><span class="line">&gt;&gt;&gt; n = 3</span><br><span class="line">&gt;&gt;&gt; for i in range(n):</span><br><span class="line">...     r.append(L[i])</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了<code>切片（Slice）操作符</code>，能大大简化这种操作。</p><p>对应上面的问题，取前3个元素，用一行代码就可以完成切片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[0:3]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</span><br></pre></td></tr></table></figure><p>知识点： <strong>[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</strong></p><ul><li>如果第一个索引是0，还可以省略：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:3]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><ul><li>也可以从索引1开始，取出2个元素出来：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[1:3]</span><br><span class="line">[&apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><ul><li>只用一个 : ，表示从头到尾：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>因此，L[:]实际上<strong>复制出了一个新list。</strong></p><p>知识点: 切片操作还可以指定<code>第三个</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[::2]</span><br><span class="line">[&apos;Adam&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>第三个参数表示<strong>每N个取一个</strong>，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。</p><p>把<code>list</code>换成<code>tuple</code>，切片操作完全相同，只是切片的结果也变成了<code>tuple</code>。</p><h3 id="编程任务-32"><a href="#编程任务-32" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>range()函数可以创建一个数列：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; range(1, 101)</span><br><span class="line">[1, 2, 3, ..., 100]</span><br></pre></td></tr></table></figure><p>请利用切片，取出：</p><ol><li>前10个数；</li><li>3的倍数；</li><li>不大于50的5的倍数。</li></ol><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> L[:<span class="number">10</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>::<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">4</span>:<span class="number">50</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]</span><br><span class="line">[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]</span><br></pre></td></tr></table></figure><h2 id="倒序切片"><a href="#倒序切片" class="headerlink" title="倒序切片"></a>倒序切片</h2><p>对于list，既然Python支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持<code>倒数切片</code>，试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</span><br><span class="line">[<span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">-2</span>]</span><br><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-3</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Bart'</span>]</span><br></pre></td></tr></table></figure><p>记住倒数第一个元素的索引是-1。知识点：<strong>倒序切片包含起始索引，不包含结束索引。</strong></p><h3 id="编程任务-33"><a href="#编程任务-33" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用倒序切片对 1 - 100 的数列取出：</p><ul><li>最后10个数；</li><li>最后10个5的倍数。</li></ul></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-10</span>:]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-46</span>::<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="对字符串切片"><a href="#对字符串切片" class="headerlink" title="对字符串切片"></a>对字符串切片</h2><p>字符串 <code>&#39;xxx&#39;</code>和 <code>Unicode</code>字符串 <code>u&#39;xxx&#39;</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[:3]</span><br><span class="line">&apos;ABC&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[-3:]</span><br><span class="line">&apos;EFG&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[::2]</span><br><span class="line">&apos;ACEG&apos;</span><br></pre></td></tr></table></figure><p>在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。知识点：Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><h3 id="编程任务-34"><a href="#编程任务-34" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>字符串有个方法 <code>upper()</code> 可以把字符变成大写字母：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;abc&apos;.upper()</span><br><span class="line">&apos;ABC&apos;</span><br></pre></td></tr></table></figure><p>但它会把所有字母都变成大写。请设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。</p><p>提示：利用切片操作简化字符串操作。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstCharUpper</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>].upper() + s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'sunday'</span>)</span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'september'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">Sunday</span><br><span class="line">September</span><br></pre></td></tr></table></figure><h1 id="各种迭代方式"><a href="#各种迭代方式" class="headerlink" title="各种迭代方式"></a>各种迭代方式</h1><h2 id="什么是迭代"><a href="#什么是迭代" class="headerlink" title="什么是迭代"></a>什么是迭代</h2><p>在Python中，如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代<code>（Iteration）</code>。</p><p>在Python中，迭代是通过 <code>for ... in</code> 来完成的，而很多语言比如C或者Java，迭代list是通过下标完成的，比如Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">    n = list[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，Python的for循环抽象程度要高于Java的for循环。</p><p>因为 Python 的 for循环不仅可以用在<code>list</code>或<code>tuple</code>上，还可以作用在<code>其他任何可迭代对象</code>上。</p><p>因此，迭代操作就是对于一个集合，<strong>无论该集合是有序还是无序</strong>，我们用 for 循环总是可以依次取出集合的每一个元素。</p><p>注意: <strong>集合</strong>是指包含一组元素的数据结构，我们已经介绍的包括：</p><ol><li>有序集合：list，tuple，知识点: str和<strong>unicode</strong>；</li><li>无序集合：set</li><li>无序集合并且具有 key-value 对：dict</li></ol><p>而迭代是一个动词，它指的是一种操作，在Python中，就是 <code>for 循环</code>。</p><p><code>迭代</code>与<code>按下标访问数组</code>最大的不同是，后者是一种具体的迭代实现方式，而前者只关心迭代结果，根本不关心迭代内部是如何实现的。</p><h3 id="编程任务-35"><a href="#编程任务-35" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用for循环迭代数列 1-100 并打印出7的倍数。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">14</span><br><span class="line">21</span><br><span class="line">28</span><br><span class="line">35</span><br><span class="line">42</span><br><span class="line">49</span><br><span class="line">56</span><br><span class="line">63</span><br><span class="line">70</span><br><span class="line">77</span><br><span class="line">84</span><br><span class="line">91</span><br><span class="line">98</span><br></pre></td></tr></table></figure><h2 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h2><p>知识点：Python中，迭代永远是取出<code>元素本身</code>，而非元素的索引。</p><p>对于有序集合，元素确实是有索引的。有的时候，我们确实想在 <code>for 循环中拿到索引</code>，怎么办？</p><p>方法是使用 <code>enumerate()</code>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">&gt;&gt;&gt; for index, name in enumerate(L):</span><br><span class="line">...     print index, &apos;-&apos;, name</span><br><span class="line">... </span><br><span class="line">0 - Adam</span><br><span class="line">1 - Lisa</span><br><span class="line">2 - Bart</span><br><span class="line">3 - Paul</span><br></pre></td></tr></table></figure><p>使用 <code>enumerate()</code>函数，我们可以在for循环中同时绑定索引index和元素name。但是，这不是 enumerate() 的特殊语法。实际上，enumerate() 函数把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>变成了类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, &apos;Adam&apos;), (1, &apos;Lisa&apos;), (2, &apos;Bart&apos;), (3, &apos;Paul&apos;)]</span><br></pre></td></tr></table></figure><p>因此，迭代的每一个元素实际上是一个<code>tuple</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for t in enumerate(L):</span><br><span class="line">    index = t[0]</span><br><span class="line">    name = t[1]</span><br><span class="line">    print index, &apos;-&apos;, name</span><br></pre></td></tr></table></figure><p>如果我们知道每个tuple元素都包含两个元素，for循环又可以进一步简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for index, name in enumerate(L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br></pre></td></tr></table></figure><p>这样不但代码更简单，而且还少了两条赋值语句。</p><p>可见，知识点: <strong>索引迭代也不是真的按索引访问，而是由 enumerate() 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。</strong></p><h3 id="编程任务-天涯-1"><a href="#编程任务-天涯-1" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>zip()函数可以把两个 list 变成一个 list：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line">[(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)]</span><br></pre></td></tr></table></figure><p>在迭代 <code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]</code>时，如果我们想打印出名次 - 名字（名次从1开始)，请考虑如何在迭代中打印出来。</p><p>提示：考虑使用zip()函数和range()函数</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> zip(range(<span class="number">1</span>, len(L)+<span class="number">1</span>), L):</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 - Adam</span><br><span class="line">2 - Lisa</span><br><span class="line">3 - Bart</span><br><span class="line">4 - Paul</span><br></pre></td></tr></table></figure><h2 id="迭代dict的value"><a href="#迭代dict的value" class="headerlink" title="迭代dict的value"></a>迭代dict的value</h2><p>迭代dict的value<br>我们已经了解了dict对象本身就是<code>可迭代对象</code>，用 <strong>for 循环直接迭代 dict，可以每次拿到dict的一个key。</strong></p><p>如果我们希望迭代 dict 对象的value，应该怎么做？</p><p>知识点：values()把dict转换成一个包含所有value的list<br>dict 对象有一个 <code>values()</code> 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.values()</span><br><span class="line"># [85, 95, 59]</span><br><span class="line">for v in d.values():</span><br><span class="line">    print v</span><br><span class="line"># 85</span><br><span class="line"># 95</span><br><span class="line"># 59</span><br></pre></td></tr></table></figure><p>如果仔细阅读Python的文档，还可以发现，<code>dict</code>除了<code>values()</code>方法外，还有一个 <code>itervalues()</code> 方法，<strong>用 itervalues() 方法替代 values() 方法，迭代效果完全一样：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.itervalues()</span><br><span class="line"># &lt;dictionary-valueiterator object at 0x106adbb50&gt;</span><br><span class="line">for v in d.itervalues():</span><br><span class="line">    print v</span><br><span class="line"># 85</span><br><span class="line"># 95</span><br><span class="line"># 59</span><br></pre></td></tr></table></figure><p>那这两个方法有何不同之处呢？</p><ol><li>values() 方法实际上把一个 dict 转换成了包含 value 的list。</li><li>但是 itervalues() 方法<strong>不会转换</strong>，它会在迭代过程中依次从 dict 中取出 value，所以 itervalues() 方法比 values() 方法<strong>节省了生成 list 所需的内存。</strong></li><li>打印 itervalues() 发现它返回一个 <dictionary-valueiterator> 对象，这说明在Python中，for 循环可作用的迭代对象远不止 list，tuple，str，unicode，dict等，知识点: <strong>任何可迭代对象都可以作用于for循环，</strong>而内部如何迭代我们通常并不用关心。</dictionary-valueiterator></li></ol><p>如果一个对象说自己可迭代，那我们就直接用 for 循环去迭代它，知识点: 可见，<strong>迭代是一种抽象的数据操作，它不对迭代对象内部的数据有任何要求。</strong></p><h3 id="编程任务-36"><a href="#编程任务-36" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>给定一个dict：d = { ‘Adam’: 95, ‘Lisa’: 85, ‘Bart’: 59, ‘Paul’: 74 }</p></blockquote><p>请计算所有同学的平均分。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59, &apos;Paul&apos;: 74 &#125;</span><br><span class="line">sum = 0.0</span><br><span class="line">for v in d.itervalues():</span><br><span class="line">    sum = sum + v</span><br><span class="line">print sum / len(d)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">78.25</span><br></pre></td></tr></table></figure><h2 id="迭代dict的key和value"><a href="#迭代dict的key和value" class="headerlink" title="迭代dict的key和value"></a>迭代dict的key和value</h2><p>我们了解了如何迭代 dict 的key和value，那么，在一个 for 循环中，<strong>能否同时迭代 key和value？</strong>答案是肯定的。</p><p>首先，我们看看 dict 对象的 <code>items()</code>方法返回的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">&gt;&gt;&gt; print d.items()</span><br><span class="line">[(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)]</span><br></pre></td></tr></table></figure><p>可以看到，items() 方法把dict对象转换成了包含tuple的list，我们对这个list进行迭代，可以同时获得key和value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for key, value in d.items():</span><br><span class="line">...     print key, &apos;:&apos;, value</span><br><span class="line">... </span><br><span class="line">Lisa : 85</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br></pre></td></tr></table></figure><p>和 <code>values()</code>有一个 <code>itervalues()</code> 类似，<code>items()</code> 也有一个对应的 <code>iteritems()</code>，知识点： <strong>iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存。</strong></p><h3 id="编程任务-37"><a href="#编程任务-37" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请根据dict：d = { ‘Adam’: 95, ‘Lisa’: 85, ‘Bart’: 59, ‘Paul’: 74 }</p></blockquote><p>打印出 <code>name : score</code>，最后再打印出平均分 <code>average : score</code>。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span>, <span class="string">'Paul'</span>: <span class="number">74</span> &#125;</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems():</span><br><span class="line">    sum = sum + v</span><br><span class="line">    <span class="keyword">print</span> k, <span class="string">':'</span>, v</span><br><span class="line"><span class="keyword">print</span> <span class="string">'average'</span>, <span class="string">':'</span>, sum / len(d)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Lisa : 85</span><br><span class="line">Paul : 74</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br><span class="line">average : 78.25</span><br></pre></td></tr></table></figure><h1 id="列表生成式-快速生成列表"><a href="#列表生成式-快速生成列表" class="headerlink" title="列表生成式:快速生成列表"></a>列表生成式:快速生成列表</h1><h2 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h2><p>要生成<code>list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>，我们可以用<code>range(1, 11)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？</p><ul><li>方法一是循环：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...    L.append(x * x)</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>但是循环太繁琐，而<strong>列表生成式</strong>则可以用一行语句代替循环生成上面的list：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>这种写法就是Python特有的列表生成式。利用列表生成式，可以以非常简洁的代码生成 list。</p><p>知识点: 写列表生成式时，把要生成的元素 <code>x * x</code>放到前面，后面跟 for 循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><h3 id="编程任务-38"><a href="#编程任务-38" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请利用列表生成式生成列表 <code>[1x2, 3x4, 5x6, 7x8, ..., 99x100]</code></p></blockquote><p>提示：<code>range(1, 100, 2)</code>可以生<code>成list [1, 3, 5, 7, 9,...]</code></p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [x * (x + <span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 12, 30, 56, 90, 132, 182, 240, 306, 380, 462, 552, 650, 756, 870, 992, 1122, 1260, 1406, 1560, 1722, 1892, 2070, 2256, 2450, 2652, 2862, 3080, 3306, 3540, 3782, 4032, 4290, 4556, 4830, 5112, 5402, 5700, 6006, 6320, 6642, 6972, 7310, 7656, 8010, 8372, 8742, 9120, 9506, 9900]</span><br></pre></td></tr></table></figure><h2 id="复杂表达式"><a href="#复杂表达式" class="headerlink" title="复杂表达式"></a>复杂表达式</h2><p>使用for循环的迭代不仅可以迭代普通的<code>list</code>，还可以迭代<code>dict</code>。</p><p>假设有如下的dict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br></pre></td></tr></table></figure><p>完全可以通过一个复杂的列表生成式把它变成一个 HTML 表格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tds = [<span class="string">'&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;'</span> % (name, score) <span class="keyword">for</span> name, score <span class="keyword">in</span> d.iteritems()]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;table&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(tds)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure><p>个人：<code>&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;</code> 中：</p><ul><li>第一个%s是name的填充位置。</li><li>第二个%s为score的填充位置。</li></ul><p>有多少个name和score，会通过循环生成多少个。<br><code>&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;</code>设置表格头<br>print ‘\n’.join(tds)。列表里的项通过<code>\n</code>连接成字符串。</p><p>注：字符串可以通过<code>%</code>进行格式化，用指定的参数替代 <code>%s</code>。字符串的<code>join()</code>方法可以把一个 <code>list</code>拼接成一个字符串。</p><p>把打印出来的结果保存为一个html文件，就可以在浏览器中看到效果了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Score<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Adam<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bart<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-2"><a href="#编程任务-天涯-2" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>在生成的表格中，对于没有及格的同学，请把分数标记为红色。</p></blockquote><p>提示：红色可以用 <code>&lt;td style=&quot;color:red&quot;&gt;</code> 实现。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">def generate_tr(name, score):</span><br><span class="line">    if score &lt; 60:</span><br><span class="line">        return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score)</span><br><span class="line">    return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score)</span><br><span class="line">tds = [generate_tr(name, score) for name, score in d.iteritems()]</span><br><span class="line">print &apos;&lt;table border=&quot;1&quot;&gt;&apos;</span><br><span class="line">print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;</span><br><span class="line">print &apos;\n&apos;.join(tds)</span><br><span class="line">print &apos;&lt;/table&gt;&apos;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/Igih291DA3.png?imageslim" alt="mark"></p><h2 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h2><p>列表生成式的 <code>for</code> 循环后面还可以加上 <code>if</code> 判断。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure><p>有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。</p><h3 id="编程任务-39"><a href="#编程任务-39" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请编写一个函数，它接受一个 list，然后把list中的所有字符串变成大写后返回，非字符串元素将被忽略。</p></blockquote><p>提示：</p><ol><li>isinstance(x, str) 可以判断变量 x 是否是字符串；</li><li>字符串的 upper() 方法可以返回大写的字母。</li></ol><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toUppers</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(x, str)]</span><br><span class="line"><span class="keyword">print</span> toUppers([<span class="string">'Hello'</span>, <span class="string">'world'</span>, <span class="number">101</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;HELLO&apos;, &apos;WORLD&apos;]</span><br></pre></td></tr></table></figure><h2 id="多层表达式-知识点"><a href="#多层表达式-知识点" class="headerlink" title="多层表达式(知识点)"></a>多层表达式(知识点)</h2><p>for循环可以<code>嵌套</code>，知识点：因此，在列表生成式中，也可以用<code>多层 for 循环来生成列表</code>。</p><p>对于字符串 <code>&#39;ABC&#39;</code> 和 <code>&#39;123&#39;</code>，可以使用两层循环，生成全排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>]</span><br><span class="line">[<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>]</span><br></pre></td></tr></table></figure><p>翻译成循环代码就像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>:</span><br><span class="line">        L.append(m + n)</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-3"><a href="#编程任务-天涯-3" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>利用 3 层for循环的列表生成式，找出对称的 3 位数。例如，121 就是对称数，因为从右到左倒过来还是 121。</p></blockquote><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print [100 * n1 + 10 * n2 + n3 for n1 in range(1, 10) for n2 in range(10) for n3 in range(10) if n1==n3]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;复习是为了更好的学习更新的知识。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt; 学习python有一年多了，希望通过学习笔记来复习了，也能让后来者少走一点弯路。在课程笔记的同时加入了一部分自己的经验补充。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 廖雪峰老师在慕课网的课程: Python入门&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://blog.cuzz.site/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://blog.cuzz.site/tags/Python/"/>
    
      <category term="零基础入门" scheme="http://blog.cuzz.site/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.cuzz.site/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
